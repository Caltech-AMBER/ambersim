"""
This type stub file was generated by pyright.
"""

import contextlib
from typing import Callable, NamedTuple, Optional, Union

import mujoco
import numpy as np
from dm_control.rl import control as _control

"""
This type stub file was generated by pyright.
"""
_FONT_STYLES = ...
_GRID_POSITIONS = ...
Contexts = ...
Selected = ...
NamedIndexStructs = ...
Pose = ...
_BOTH_SEGMENTATION_AND_DEPTH_ENABLED = ...
_INVALID_PHYSICS_STATE = ...
_OVERLAYS_NOT_SUPPORTED_FOR_DEPTH_OR_SEGMENTATION = ...
_RENDER_FLAG_OVERRIDES_NOT_SUPPORTED_FOR_DEPTH_OR_SEGMENTATION = ...
_KEYFRAME_ID_OUT_OF_RANGE = ...

class Physics(_control.Physics):
    """Encapsulates a MuJoCo model.

    A MuJoCo model is typically defined by an MJCF XML file [0]

    ```python
    physics = Physics.from_xml_path('/path/to/model.xml')

    with physics.reset_context():
      physics.named.data.qpos['hinge'] = np.random.rand()

    # Apply controls and advance the simulation state.
    physics.set_control(np.random.random_sample(size=N_ACTUATORS))
    physics.step()

    # Render a camera defined in the XML file to a NumPy array.
    rgb = physics.render(height=240, width=320, id=0)
    ```

    [0] http://www.mujoco.org/book/modeling.html
    """

    _contexts = ...
    def __new__(cls, *args, **kwargs): ...
    def __init__(self, data) -> None:
        """Initializes a new `Physics` instance.

        Args:
          data: Instance of `wrapper.MjData`.
        """
        ...
    @contextlib.contextmanager
    def suppress_physics_errors(self):
        """Physics warnings will be logged rather than raise exceptions."""
        ...
    def enable_profiling(self):
        """Enables Mujoco timing profiling."""
        ...
    def set_control(self, control):
        """Sets the control signal for the actuators.

        Args:
          control: NumPy array or array-like actuation values.
        """
        ...
    def step(self, nstep: int = ...) -> None:
        """Advances the physics state by `nstep`s.

        Args:
          nstep: Optional integer, number of steps to take.

        The actuation can be updated by calling the `set_control` function first.
        """
        ...
    def render(
        self,
        height=...,
        width=...,
        camera_id=...,
        overlays=...,
        depth=...,
        segmentation=...,
        scene_option=...,
        render_flag_overrides=...,
        scene_callback: Optional[Callable[[Physics, mujoco.MjvScene], None]] = ...,
    ):
        """Returns a camera view as a NumPy array of pixel values.

        Args:
          height: Viewport height (number of pixels). Optional, defaults to 240.
          width: Viewport width (number of pixels). Optional, defaults to 320.
          camera_id: Optional camera name or index. Defaults to -1, the free
            camera, which is always defined. A nonnegative integer or string
            corresponds to a fixed camera, which must be defined in the model XML.
            If `camera_id` is a string then the camera must also be named.
          overlays: An optional sequence of `TextOverlay` instances to draw. Only
            supported if `depth` is False.
          depth: If `True`, this method returns a NumPy float array of depth values
            (in meters). Defaults to `False`, which results in an RGB image.
          segmentation: If `True`, this method returns a 2-channel NumPy int32 array
            of label values where the pixels of each object are labeled with the
            pair (mjModel ID, mjtObj enum object type). Background pixels are
            labeled (-1, -1). Defaults to `False`, which returns an RGB image.
          scene_option: An optional `wrapper.MjvOption` instance that can be used to
            render the scene with custom visualization options. If None then the
            default options will be used.
          render_flag_overrides: Optional mapping specifying rendering flags to
            override. The keys can be either lowercase strings or `mjtRndFlag` enum
            values, and the values are the overridden flag values, e.g.
            `{'wireframe': True}` or `{mujoco.mjtRndFlag.mjRND_WIREFRAME: True}`.
            See `mujoco.mjtRndFlag` for the set of valid flags. Must be None if
            either `depth` or `segmentation` is True.
          scene_callback: Called after the scene has been created and before
            it is rendered. Can be used to add more geoms to the scene.

        Returns:
          The rendered RGB, depth or segmentation image.
        """
        ...
    def get_state(self):
        """Returns the physics state.

        Returns:
          NumPy array containing full physics simulation state.
        """
        ...
    def set_state(self, physics_state):
        """Sets the physics state.

        Args:
          physics_state: NumPy array containing the full physics simulation state.

        Raises:
          ValueError: If `physics_state` has invalid size.
        """
        ...
    def copy(self, share_model=...):
        """Creates a copy of this `Physics` instance.

        Args:
          share_model: If True, the copy and the original will share a common
            MjModel instance. By default, both model and data will both be copied.

        Returns:
          A `Physics` instance.
        """
        ...
    def reset(self, keyframe_id=...):
        """Resets internal variables of the simulation, possibly to a keyframe.

        Args:
          keyframe_id: Optional integer specifying the index of a keyframe defined
            in the model XML to which the simulation state should be initialized.
            Must be between 0 and `self.model.nkey - 1` (inclusive).

        Raises:
          ValueError: If `keyframe_id` is out of range.
        """
        ...
    def after_reset(self):
        """Runs after resetting internal variables of the physics simulation."""
        ...
    def forward(self):
        """Recomputes the forward dynamics without advancing the simulation."""
        ...
    @contextlib.contextmanager
    def check_invalid_state(self):
        """Checks whether the physics state is invalid at exit.

        Yields:
          None

        Raises:
          PhysicsError: if the simulation state is invalid at exit, unless this
            context is nested inside a `suppress_physics_errors` context, in which
            case a warning will be logged instead.
        """
        ...
    def __getstate__(self): ...
    def __setstate__(self, data): ...
    def free(self):
        """Frees the native MuJoCo data structures held by this `Physics` instance.

        This is an advanced feature for use when manual memory management is
        necessary. This `Physics` object MUST NOT be used after this function has
        been called.
        """
        ...
    @classmethod
    def from_model(cls, model):
        """A named constructor from a `wrapper.MjModel` instance."""
        ...
    @classmethod
    def from_xml_string(cls, xml_string, assets=...):
        """A named constructor from a string containing an MJCF XML file.

        Args:
          xml_string: XML string containing an MJCF model description.
          assets: Optional dict containing external assets referenced by the model
            (such as additional XML files, textures, meshes etc.), in the form of
            `{filename: contents_string}` pairs. The keys should correspond to the
            filenames specified in the model XML.

        Returns:
          A new `Physics` instance.
        """
        ...
    @classmethod
    def from_byte_string(cls, byte_string):
        """A named constructor from a model binary as a byte string."""
        ...
    @classmethod
    def from_xml_path(cls, file_path):
        """A named constructor from a path to an MJCF XML file.

        Args:
          file_path: String containing path to model definition file.

        Returns:
          A new `Physics` instance.
        """
        ...
    @classmethod
    def from_binary_path(cls, file_path):
        """A named constructor from a path to an MJB model binary file.

        Args:
          file_path: String containing path to model definition file.

        Returns:
          A new `Physics` instance.
        """
        ...
    def reload_from_xml_string(self, xml_string, assets=...):
        """Reloads the `Physics` instance from a string containing an MJCF XML file.

        After calling this method, the state of the `Physics` instance is the same
        as a new `Physics` instance created with the `from_xml_string` named
        constructor.

        Args:
          xml_string: XML string containing an MJCF model description.
          assets: Optional dict containing external assets referenced by the model
            (such as additional XML files, textures, meshes etc.), in the form of
            `{filename: contents_string}` pairs. The keys should correspond to the
            filenames specified in the model XML.
        """
        ...
    def reload_from_xml_path(self, file_path):
        """Reloads the `Physics` instance from a path to an MJCF XML file.

        After calling this method, the state of the `Physics` instance is the same
        as a new `Physics` instance created with the `from_xml_path`
        named constructor.

        Args:
          file_path: String containing path to model definition file.
        """
        ...
    @property
    def named(self): ...
    @property
    def contexts(self):
        """Returns a `Contexts` namedtuple, used in `Camera`s and rendering code."""
        ...
    @property
    def model(self): ...
    @property
    def data(self): ...
    def control(self):
        """Returns a copy of the control signals for the actuators."""
        ...
    def activation(self):
        """Returns a copy of the internal states of actuators.

        For details, please refer to
        http://www.mujoco.org/book/computation.html#geActuation

        Returns:
          Activations in a numpy array.
        """
        ...
    def state(self):
        """Returns the full physics state. Alias for `get_physics_state`."""
        ...
    def position(self):
        """Returns a copy of the generalized positions (system configuration)."""
        ...
    def velocity(self):
        """Returns a copy of the generalized velocities."""
        ...
    def timestep(self):
        """Returns the simulation timestep."""
        ...
    def time(self):
        """Returns episode time in seconds."""
        ...

class CameraMatrices(NamedTuple):
    """Component matrices used to construct the camera matrix.

    The matrix product over these components yields the camera matrix.

    Attributes:
      image: (3, 3) image matrix.
      focal: (3, 4) focal matrix.
      rotation: (4, 4) rotation matrix.
      translation: (4, 4) translation matrix.
    """

    image: np.ndarray
    focal: np.ndarray
    rotation: np.ndarray
    translation: np.ndarray
    ...

class Camera:
    """Mujoco scene camera.

    Holds rendering properties such as the width and height of the viewport. The
    camera position and rotation is defined by the Mujoco camera corresponding to
    the `camera_id`. Multiple `Camera` instances may exist for a single
    `camera_id`, for example to render the same view at different resolutions.
    """

    def __init__(
        self,
        physics: Physics,
        height: int = ...,
        width: int = ...,
        camera_id: Union[int, str] = ...,
        max_geom: Optional[int] = ...,
        scene_callback: Optional[Callable[[Physics, mujoco.MjvScene], None]] = ...,
    ) -> None:
        """Initializes a new `Camera`.

        Args:
          physics: Instance of `Physics`.
          height: Optional image height. Defaults to 240.
          width: Optional image width. Defaults to 320.
          camera_id: Optional camera name or index. Defaults to -1, the free
            camera, which is always defined. A nonnegative integer or string
            corresponds to a fixed camera, which must be defined in the model XML.
            If `camera_id` is a string then the camera must also be named.
          max_geom: Optional integer specifying the maximum number of geoms that can
            be rendered in the same scene. If None this will be chosen automatically
            based on the estimated maximum number of renderable geoms in the model.
          scene_callback: Called after the scene has been created and before
            it is rendered. Can be used to add more geoms to the scene.
        Raises:
          ValueError: If `camera_id` is outside the valid range, or if `width` or
            `height` exceed the dimensions of MuJoCo's offscreen framebuffer.
        """
        ...
    @property
    def width(self):
        """Returns the image width (number of pixels)."""
        ...
    @property
    def height(self):
        """Returns the image height (number of pixels)."""
        ...
    @property
    def option(self):
        """Returns the camera's visualization options."""
        ...
    @property
    def scene(self):
        """Returns the `mujoco.MjvScene` instance used by the camera."""
        ...
    def matrices(self) -> CameraMatrices:
        """Computes the component matrices used to compute the camera matrix.

        Returns:
          An instance of `CameraMatrices` containing the image, focal, rotation, and
          translation matrices of the camera.
        """
        ...
    @property
    def matrix(self):
        """Returns the 3x4 camera matrix.

        For a description of the camera matrix see, e.g.,
        https://en.wikipedia.org/wiki/Camera_matrix.
        For a usage example, see the associated test.
        """
        ...
    def update(self, scene_option=...):
        """Updates geometry used for rendering.

        Args:
          scene_option: A custom `wrapper.MjvOption` instance to use to render
            the scene instead of the default.  If None, will use the default.
        """
        ...
    def render(self, overlays=..., depth=..., segmentation=..., scene_option=..., render_flag_overrides=...):
        """Renders the camera view as a numpy array of pixel values.

        Args:
          overlays: An optional sequence of `TextOverlay` instances to draw. Only
            supported if `depth` and `segmentation` are both False.
          depth: An optional boolean. If True, makes the camera return depth
            measurements. Cannot be enabled if `segmentation` is True.
          segmentation: An optional boolean. If True, make the camera return a
            pixel-wise segmentation of the scene. Cannot be enabled if `depth` is
            True.
          scene_option: A custom `wrapper.MjvOption` instance to use to render
            the scene instead of the default.  If None, will use the default.
          render_flag_overrides: Optional mapping containing rendering flags to
            override. The keys can be either lowercase strings or `mjtRndFlag` enum
            values, and the values are the overridden flag values, e.g.
            `{'wireframe': True}` or `{mujoco.mjtRndFlag.mjRND_WIREFRAME: True}`.
            See `mujoco.mjtRndFlag` for the set of valid flags. Must be empty if
            either `depth` or `segmentation` is True.

        Returns:
          The rendered scene.
            * If `depth` and `segmentation` are both False (default), this is a
              (height, width, 3) uint8 numpy array containing RGB values.
            * If `depth` is True, this is a (height, width) float32 numpy array
              containing depth values (in meters).
            * If `segmentation` is True, this is a (height, width, 2) int32 numpy
              array where the first channel contains the integer ID of the object at
              each pixel, and the second channel contains the corresponding object
              type (a value in the `mjtObj` enum). Background pixels are labeled
              (-1, -1).

        Raises:
          ValueError: If either `overlays` or `render_flag_overrides` is requested
            when `depth` or `segmentation` rendering is enabled.
          ValueError: If both depth and segmentation flags are set together.
        """
        ...
    def select(self, cursor_position):
        """Returns bodies and geoms visible at given coordinates in the frame.

        Args:
          cursor_position:  A `tuple` containing x and y coordinates, normalized to
            between 0 and 1, and where (0, 0) is bottom-left.

        Returns:
          A `Selected` namedtuple. Fields are None if nothing is selected.
        """
        ...

class MovableCamera(Camera):
    """Subclass of `Camera` that can be moved by changing its pose.

    A `MovableCamera` always corresponds to a MuJoCo free camera with id -1.
    """

    def __init__(
        self,
        physics: Physics,
        height: int = ...,
        width: int = ...,
        max_geom: Optional[int] = ...,
        scene_callback: Optional[Callable[[Physics, mujoco.MjvScene], None]] = ...,
    ) -> None:
        """Initializes a new `MovableCamera`.

        Args:
          physics: Instance of `Physics`.
          height: Optional image height. Defaults to 240.
          width: Optional image width. Defaults to 320.
          max_geom: Optional integer specifying the maximum number of geoms that can
            be rendered in the same scene. If None this will be chosen automatically
            based on the estimated maximum number of renderable geoms in the model.
          scene_callback: Called after the scene has been created and before
            it is rendered. Can be used to add more geoms to the scene.
        """
        ...
    def get_pose(self):
        """Returns the pose of the camera.

        Returns:
          A `Pose` named tuple with fields:
            lookat: NumPy array specifying lookat point.
            distance: Float specifying distance to `lookat`.
            azimuth: Azimuth in degrees.
            elevation: Elevation in degrees.
        """
        ...
    def set_pose(self, lookat, distance, azimuth, elevation):
        """Sets the pose of the camera.

        Args:
          lookat: NumPy array or list specifying lookat point.
          distance: Float specifying distance to `lookat`.
          azimuth: Azimuth in degrees.
          elevation: Elevation in degrees.
        """
        ...

class TextOverlay:
    """A text overlay that can be drawn on top of a camera view."""

    __slots__ = ...
    def __init__(self, title=..., body=..., style=..., position=...) -> None:
        """Initializes a new TextOverlay instance.

        Args:
          title: Title text.
          body: Body text.
          style: The font style. Can be either "normal", "shadow", or "big".
          position: The grid position of the overlay. Can be either "top left",
            "top right", "bottom left", or "bottom right".
        """
        ...
    def draw(self, context, rect):
        """Draws the overlay.

        Args:
          context: A `mujoco.MjrContext` pointer.
          rect: A `mujoco.MjrRect`.
        """
        ...

def action_spec(physics):
    """Returns a `BoundedArraySpec` matching the `physics` actuators."""
    ...
