"""
This type stub file was generated by pyright.
"""

import contextlib

import mujoco

"""Main user-facing classes and utility functions for loading MuJoCo models."""
_FAKE_BINARY_FILENAME = ...
_CONTACT_ID_OUT_OF_RANGE = ...

class Error(Exception):
    """Base class for MuJoCo exceptions."""

    ...

if mujoco.mjVERSION_HEADER != mujoco.mj_version(): ...
_LAST_PARSED_MODEL_PTR = ...
_NOT_LAST_PARSED_ERROR = ...

def enable_timer(enabled=...):  # -> None:
    ...

def set_callback(name, new_callback=...):  # -> None:
    """Sets a user-defined callback function to modify MuJoCo's behavior.

    Callback functions should have the following signature:
      func(const_mjmodel_ptr, mjdata_ptr) -> None

    Args:
      name: Name of the callback to set. Must be a field in
        `functions.function_pointers`.
      new_callback: The new callback. This can be one of the following:
        * A Python callable
        * A C function exposed by a `ctypes.CDLL` object
        * An integer specifying the address of a callback function
        * None, in which case any existing callback of that name is removed
    """
    ...

@contextlib.contextmanager
def callback_context(name, new_callback=...):  # -> Generator[None, Any, None]:
    """Context manager that temporarily overrides a MuJoCo callback function.

    On exit, the callback will be restored to its original value (None if the
    callback was not already overridden when the context was entered).

    Args:
      name: Name of the callback to set. Must be a field in
        `mjbindings.function_pointers`.
      new_callback: The new callback. This can be one of the following:
        * A Python callable
        * A C function exposed by a `ctypes.CDLL` object
        * An integer specifying the address of a callback function
        * None, in which case any existing callback of that name is removed

    Yields:
      None
    """
    ...

def get_schema():  # -> Any:
    """Returns a string containing the schema used by the MuJoCo XML parser."""
    ...

def save_last_parsed_model_to_xml(xml_path, check_model=...):  # -> None:
    """Writes a description of the most recently loaded model to an MJCF XML file.

    Args:
      xml_path: Path to the output XML file.
      check_model: Optional `MjModel` instance. If specified, this model will be
        checked to see if it is the most recently parsed one, and a ValueError
        will be raised otherwise.
    Raises:
      Error: If MuJoCo encounters an error while writing the XML file.
      ValueError: If `check_model` was passed, and this model is not the most
        recently parsed one.
    """
    ...

class _MjModelMeta(type):
    """Metaclass which allows MjModel below to delegate to mujoco.MjModel."""

    def __new__(cls, name, bases, dct):  # -> Self@_MjModelMeta:
        ...

class MjModel(metaclass=_MjModelMeta):
    """Wrapper class for a MuJoCo 'mjModel' instance.

    MjModel encapsulates features of the model that are expected to remain
    constant. It also contains simulation and visualization options which may be
    changed occasionally, although this is done explicitly by the user.
    """

    _HAS_DYNAMIC_ATTRIBUTES = ...
    def __init__(self, model_ptr) -> None:
        """Creates a new MjModel instance from a mujoco.MjModel."""
        ...
    @property
    def ptr(self):  # -> Unknown:
        """The lower level MjModel instance."""
        ...
    def __getstate__(self):  # -> Unknown:
        ...
    def __setstate__(self, state):  # -> None:
        ...
    def __copy__(self):  # -> MjModel:
        ...
    @classmethod
    def from_xml_string(cls, xml_string, assets=...):  # -> Self@MjModel:
        """Creates an `MjModel` instance from a model description XML string.

        Args:
          xml_string: String containing an MJCF or URDF model description.
          assets: Optional dict containing external assets referenced by the model
            (such as additional XML files, textures, meshes etc.), in the form of
            `{filename: contents_string}` pairs. The keys should correspond to the
            filenames specified in the model XML.

        Returns:
          An `MjModel` instance.
        """
        ...
    @classmethod
    def from_byte_string(cls, byte_string):  # -> Self@MjModel:
        """Creates an MjModel instance from a model binary as a string of bytes."""
        ...
    @classmethod
    def from_xml_path(cls, xml_path):  # -> Self@MjModel:
        """Creates an MjModel instance from a path to a model XML file."""
        ...
    @classmethod
    def from_binary_path(cls, binary_path):  # -> Self@MjModel:
        """Creates an MjModel instance from a path to a compiled model binary."""
        ...
    def save_binary(self, binary_path):  # -> None:
        """Saves the MjModel instance to a binary file."""
        ...
    def to_bytes(self):  # -> bytes:
        """Serialize the model to a string of bytes."""
        ...
    def copy(self):  # -> MjModel:
        """Returns a copy of this MjModel instance."""
        ...
    def free(self):  # -> None:
        """Frees the native resources held by this MjModel.

        This is an advanced feature for use when manual memory management is
        necessary. This MjModel object MUST NOT be used after this function has
        been called.
        """
        ...
    def name2id(self, name, object_type):
        """Returns the integer ID of a specified MuJoCo object.

        Args:
          name: String specifying the name of the object to query.
          object_type: The type of the object. Can be either a lowercase string
            (e.g. 'body', 'geom') or an `mjtObj` enum value.

        Returns:
          An integer object ID.

        Raises:
          Error: If `object_type` is not a valid MuJoCo object type, or if no object
            with the corresponding name and type was found.
        """
        ...
    def id2name(self, object_id, object_type):  # -> str:
        """Returns the name associated with a MuJoCo object ID, if there is one.

        Args:
          object_id: Integer ID.
          object_type: The type of the object. Can be either a lowercase string
            (e.g. 'body', 'geom') or an `mjtObj` enum value.

        Returns:
          A string containing the object name, or an empty string if the object ID
          either doesn't exist or has no name.

        Raises:
          Error: If `object_type` is not a valid MuJoCo object type.
        """
        ...
    @contextlib.contextmanager
    def disable(self, *flags):  # -> Generator[None, Any, None]:
        """Context manager for temporarily disabling MuJoCo flags.

        Args:
          *flags: Positional arguments specifying flags to disable. Can be either
            lowercase strings (e.g. 'gravity', 'contact') or `mjtDisableBit` enum
            values.

        Yields:
          None

        Raises:
          ValueError: If any item in `flags` is neither a valid name nor a value
            from `mujoco.mjtDisableBit`.
        """
        ...
    @property
    def name(self):  # -> str:
        """Returns the name of the model."""
        ...

class _MjDataMeta(type):
    """Metaclass which allows MjData below to delegate to mujoco.MjData."""

    def __new__(cls, name, bases, dct):  # -> Self@_MjDataMeta:
        ...

class MjData(metaclass=_MjDataMeta):
    """Wrapper class for a MuJoCo 'mjData' instance.

    MjData contains all of the dynamic variables and intermediate results produced
    by the simulation. These are expected to change on each simulation timestep.
    """

    _HAS_DYNAMIC_ATTRIBUTES = ...
    def __init__(self, model) -> None:
        """Construct a new MjData instance.

        Args:
          model: An MjModel instance.
        """
        ...
    def __getstate__(self):  # -> tuple[Unknown, Unknown]:
        ...
    def __setstate__(self, state):  # -> None:
        ...
    def __copy__(self):  # -> MjData:
        ...
    def copy(self):  # -> MjData:
        """Returns a copy of this MjData instance with the same parent MjModel."""
        ...
    def object_velocity(self, object_id, object_type, local_frame=...):  # -> ndarray[Any, dtype[float64]]:
        """Returns the 6D velocity (linear, angular) of a MuJoCo object.

        Args:
          object_id: Object identifier. Can be either integer ID or String name.
          object_type: The type of the object. Can be either a lowercase string
            (e.g. 'body', 'geom') or an `mjtObj` enum value.
          local_frame: Boolean specifiying whether the velocity is given in the
            global (worldbody), or local (object) frame.

        Returns:
          2x3 array with stacked (linear_velocity, angular_velocity)

        Raises:
          Error: If `object_type` is not a valid MuJoCo object type, or if no object
            with the corresponding name and type was found.
        """
        ...
    def contact_force(self, contact_id):  # -> ndarray[Any, dtype[float64]]:
        """Returns the wrench of a contact as a 2 x 3 array of (forces, torques).

        Args:
          contact_id: Integer, the index of the contact within the contact buffer
            (`self.contact`).

        Returns:
          2x3 array with stacked (force, torque). Note that the order of dimensions
            is (normal, tangent, tangent), in the contact's frame.

        Raises:
          ValueError: If `contact_id` is negative or bigger than ncon-1.
        """
        ...
    @property
    def ptr(self):
        """The lower level MjData instance."""
        ...
    @property
    def model(self):  # -> Unknown:
        """The parent MjModel for this MjData instance."""
        ...
    @property
    def contact(self):
        """Variable-length recarray containing all current contacts."""
        ...

class MjvCamera(mujoco.MjvCamera):
    @property
    def type_(self): ...
    @type_.setter
    def type_(self, t):  # -> None:
        ...
    @property
    def ptr(self):  # -> Self@MjvCamera:
        ...

class MjvOption(mujoco.MjvOption):
    def __init__(self) -> None: ...
    @property
    def ptr(self):  # -> Self@MjvOption:
        ...

class MjrContext:
    """Wrapper for mujoco.MjrContext."""

    def __init__(self, model, gl_context, font_scale=...) -> None:
        """Initializes this MjrContext instance.

        Args:
          model: An `MjModel` instance.
          gl_context: A `render.ContextBase` instance.
          font_scale: Integer controlling the font size for text. Must be a value
            in `mujoco.mjtFontScale`.

        Raises:
          ValueError: If `font_scale` is invalid.
        """
        ...
    @property
    def ptr(self):  # -> None:
        ...
    def free(self):  # -> None:
        """Frees the native resources held by this MjrContext.

        This is an advanced feature for use when manual memory management is
        necessary. This MjrContext object MUST NOT be used after this function has
        been called.
        """
        ...
    def __del__(self):  # -> None:
        ...

_NAME_TO_RENDER_FLAG_ENUM_VALUE = ...

class MjvScene(mujoco.MjvScene):
    def __init__(self, model=..., max_geom=...) -> None:
        """Initializes a new `MjvScene` instance.

        Args:
          model: (optional) An `MjModel` instance.
          max_geom: (optional) An integer specifying the maximum number of geoms
            that can be represented in the scene. If None, this will be chosen
            automatically based on `model`.
        """
        ...
    @property
    def ptr(self):  # -> Self@MjvScene:
        ...
    @contextlib.contextmanager
    def override_flags(self, overrides):  # -> Generator[None, Any, None]:
        """Context manager for temporarily overriding rendering flags.

        Args:
          overrides: A mapping specifying rendering flags to override. The keys can
            be either lowercase strings or `mjtRndFlag` enum values, and the values
            are the overridden flag values, e.g. `{'wireframe': True}` or
            `{mujoco.mjtRndFlag.mjRND_WIREFRAME: True}`. See `mujoco.mjtRndFlag` for
            the set of valid flags.

        Yields:
          None
        """
        ...
    def free(self):  # -> None:
        """Frees the native resources held by this MjvScene.

        This is an advanced feature for use when manual memory management is
        necessary. This MjvScene object MUST NOT be used after this function has
        been called.
        """
        ...
    @property
    def geoms(self):
        """Variable-length recarray containing all geoms currently in the buffer."""
        ...

class MjvPerturb(mujoco.MjvPerturb):
    @property
    def ptr(self):  # -> Self@MjvPerturb:
        ...

class MjvFigure(mujoco.MjvFigure):
    @property
    def ptr(self):  # -> Self@MjvFigure:
        ...
    @property
    def range_(self): ...
    @range_.setter
    def range_(self, value):  # -> None:
        ...
