"""
This type stub file was generated by pyright.
"""

import abc

"""
This type stub file was generated by pyright.
"""
_INVALID_REFERENCE_TYPE = ...
_MESH_EXTENSIONS = ...
_INVALID_MESH_EXTENSION = ...

class _Attribute(metaclass=abc.ABCMeta):
    """Abstract base class for MJCF attribute data types."""

    def __init__(self, name, required, parent, value, conflict_allowed, conflict_behavior) -> None: ...
    @property
    def last_modified_stack(self): ...
    @property
    def value(self): ...
    @value.setter
    def value(self, new_value): ...
    def clear(self): ...
    def to_xml_string(self, prefix_root, **kwargs): ...
    @property
    def conflict_allowed(self): ...
    @property
    def conflict_behavior(self): ...

class String(_Attribute):
    """A string MJCF attribute."""

    ...

class Integer(_Attribute):
    """An integer MJCF attribute."""

    ...

class Float(_Attribute):
    """An float MJCF attribute."""

    def to_xml_string(self, prefix_root=..., *, precision=..., zero_threshold=..., **kwargs): ...

class Keyword(_Attribute):
    """A keyword MJCF attribute."""

    def __init__(self, name, required, parent, value, conflict_allowed, conflict_behavior, valid_values) -> None: ...
    @property
    def valid_values(self): ...

class Array(_Attribute):
    """An array MJCF attribute."""

    def __init__(self, name, required, parent, value, conflict_allowed, conflict_behavior, length, dtype) -> None: ...
    def to_xml_string(self, prefix_root=..., *, precision=..., zero_threshold=..., **kwargs): ...

class Identifier(_Attribute):
    """A string attribute that represents a unique identifier of an element."""

    def to_xml_string(self, prefix_root=..., **kwargs): ...

class Reference(_Attribute):
    """A string attribute that represents a reference to an identifier."""

    def __init__(
        self, name, required, parent, value, conflict_allowed, conflict_behavior, reference_namespace
    ) -> None: ...
    @property
    def value(self): ...
    @value.setter
    def value(self, new_value): ...
    @property
    def reference_namespace(self): ...
    def to_xml_string(self, prefix_root, **kwargs): ...

class BasePath(_Attribute):
    """A string attribute that represents a base path for an asset type."""

    def __init__(self, name, required, parent, value, conflict_allowed, conflict_behavior, path_namespace) -> None: ...
    def to_xml_string(self, prefix_root=..., **kwargs): ...

class BaseAsset:
    """Base class for binary assets."""

    __slots__ = ...
    def __init__(self, extension, prefix=...) -> None: ...
    def __eq__(self, other) -> bool: ...
    def get_vfs_filename(self):
        """Returns the name of the asset file as registered in MuJoCo's VFS."""
        ...

class Asset(BaseAsset):
    """Class representing a binary asset."""

    __slots__ = ...
    def __init__(self, contents, extension, prefix=...) -> None:
        """Initializes a new `Asset`.

        Args:
          contents: The contents of the file as a bytestring.
          extension: A string specifying the file extension (e.g. '.png', '.stl').
          prefix: (optional) A prefix applied to the filename given in MuJoCo's VFS.
        """
        ...

class SkinAsset(BaseAsset):
    """Class representing a binary asset corresponding to a skin."""

    __slots__ = ...
    def __init__(self, contents, parent, extension, prefix=...) -> None: ...
    @property
    def contents(self): ...

class File(_Attribute):
    """Attribute representing an asset file."""

    def __init__(self, name, required, parent, value, conflict_allowed, conflict_behavior, path_namespace) -> None: ...
    def get_contents(self):
        """Returns a bytestring representing the contents of the asset."""
        ...
    def to_xml_string(self, prefix_root=..., **kwargs):
        """Returns the asset filename as it will appear in the generated XML."""
        ...
