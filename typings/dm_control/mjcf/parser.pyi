"""
This type stub file was generated by pyright.
"""

"""
This type stub file was generated by pyright.
"""

def from_xml_string(xml_string, escape_separators=..., model_dir=..., resolve_references=..., assets=...):
    """Parses an XML string into an MJCF object model.

    Args:
      xml_string: An XML string representing an MJCF model.
      escape_separators: (optional) A boolean, whether to replace '/' characters
        in element identifiers. If `False`, any '/' present in the XML causes
        a ValueError to be raised.
      model_dir: (optional) Path to the directory containing the model XML file.
        This is used to prefix the paths of all asset files.
      resolve_references: (optional) A boolean indicating whether the parser
        should attempt to resolve reference attributes to a corresponding element.
      assets: (optional) A dictionary of pre-loaded assets, of the form
        `{filename: bytestring}`. If present, PyMJCF will search for assets in
        this dictionary before attempting to load them from the filesystem.

    Returns:
      An `mjcf.RootElement`.
    """
    ...

def from_file(file_handle, escape_separators=..., model_dir=..., resolve_references=..., assets=...):
    """Parses an XML file into an MJCF object model.

    Args:
      file_handle: A Python file-like handle.
      escape_separators: (optional) A boolean, whether to replace '/' characters
        in element identifiers. If `False`, any '/' present in the XML causes
        a ValueError to be raised.
      model_dir: (optional) Path to the directory containing the model XML file.
        This is used to prefix the paths of all asset files.
      resolve_references: (optional) A boolean indicating whether the parser
        should attempt to resolve reference attributes to a corresponding element.
      assets: (optional) A dictionary of pre-loaded assets, of the form
        `{filename: bytestring}`. If present, PyMJCF will search for assets in
        this dictionary before attempting to load them from the filesystem.

    Returns:
      An `mjcf.RootElement`.
    """
    ...

def from_path(path, escape_separators=..., resolve_references=..., assets=...):
    """Parses an XML file into an MJCF object model.

    Args:
      path: A path to an XML file. This path should be loadable using
        `resources.GetResource`.
      escape_separators: (optional) A boolean, whether to replace '/' characters
        in element identifiers. If `False`, any '/' present in the XML causes
        a ValueError to be raised.
      resolve_references: (optional) A boolean indicating whether the parser
        should attempt to resolve reference attributes to a corresponding element.
      assets: (optional) A dictionary of pre-loaded assets, of the form
        `{filename: bytestring}`. If present, PyMJCF will search for assets in
        this dictionary before attempting to load them from the filesystem.

    Returns:
      An `mjcf.RootElement`.
    """
    ...
