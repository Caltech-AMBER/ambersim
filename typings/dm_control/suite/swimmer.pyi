"""
This type stub file was generated by pyright.
"""

from dm_control import mujoco
from dm_control.suite import base

"""Procedurally generated Swimmer domain."""
_DEFAULT_TIME_LIMIT = ...
_CONTROL_TIMESTEP = ...
SUITE = ...

def get_model_and_assets(n_joints):  # -> tuple[Unknown, dict[str, Any]]:
    """Returns a tuple containing the model XML string and a dict of assets.

    Args:
      n_joints: An integer specifying the number of joints in the swimmer.

    Returns:
      A tuple `(model_xml_string, assets)`, where `assets` is a dict consisting of
      `{filename: contents_string}` pairs.
    """
    ...

@SUITE.add("benchmarking")
def swimmer6(time_limit=..., random=..., environment_kwargs=...):  # -> Environment:
    """Returns a 6-link swimmer."""
    ...

@SUITE.add("benchmarking")
def swimmer15(time_limit=..., random=..., environment_kwargs=...):  # -> Environment:
    """Returns a 15-link swimmer."""
    ...

def swimmer(n_links=..., time_limit=..., random=..., environment_kwargs=...):  # -> Environment:
    """Returns a swimmer with n links."""
    ...

class Physics(mujoco.Physics):
    """Physics simulation with additional features for the swimmer domain."""

    def nose_to_target(self):
        """Returns a vector from nose to target in local coordinate of the head."""
        ...
    def nose_to_target_dist(self):  # -> floating[Any]:
        """Returns the distance from the nose to the target."""
        ...
    def body_velocities(self):
        """Returns local body velocities: x,y linear, z rotational."""
        ...
    def joints(self):
        """Returns all internal joint angles (excluding root joints)."""
        ...

class Swimmer(base.Task):
    """A swimmer `Task` to reach the target or just swim."""

    def __init__(self, random=...) -> None:
        """Initializes an instance of `Swimmer`.

        Args:
          random: Optional, either a `numpy.random.RandomState` instance, an
            integer seed for creating a new `RandomState`, or None to select a seed
            automatically (default).
        """
        ...
    def initialize_episode(self, physics):  # -> None:
        """Sets the state of the environment at the start of each episode.

        Initializes the swimmer orientation to [-pi, pi) and the relative joint
        angle of each joint uniformly within its range.

        Args:
          physics: An instance of `Physics`.
        """
        ...
    def get_observation(self, physics):  # -> OrderedDict[Unknown, Unknown]:
        """Returns an observation of joint angles, body velocities and target."""
        ...
    def get_reward(self, physics):  # -> float | NDArray[Any]:
        """Returns a smooth reward."""
        ...
