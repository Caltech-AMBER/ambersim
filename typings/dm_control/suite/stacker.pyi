"""
This type stub file was generated by pyright.
"""

from dm_control import mujoco
from dm_control.suite import base

"""Planar Stacker domain."""
_CLOSE = ...
_CONTROL_TIMESTEP = ...
_TIME_LIMIT = ...
_ARM_JOINTS = ...
SUITE = ...

def make_model(n_boxes):  # -> tuple[Unknown, dict[str, Any]]:
    """Returns a tuple containing the model XML string and a dict of assets."""
    ...

@SUITE.add("hard")
def stack_2(fully_observable=..., time_limit=..., random=..., environment_kwargs=...):  # -> Environment:
    """Returns stacker task with 2 boxes."""
    ...

@SUITE.add("hard")
def stack_4(fully_observable=..., time_limit=..., random=..., environment_kwargs=...):  # -> Environment:
    """Returns stacker task with 4 boxes."""
    ...

class Physics(mujoco.Physics):
    """Physics with additional features for the Planar Manipulator domain."""

    def bounded_joint_pos(self, joint_names):  # -> NDArray[Any]:
        """Returns joint positions as (sin, cos) values."""
        ...
    def joint_vel(self, joint_names):
        """Returns joint velocities."""
        ...
    def body_2d_pose(self, body_names, orientation=...):  # -> NDArray[Unknown]:
        """Returns positions and/or orientations of bodies."""
        ...
    def touch(self):  # -> Any:
        ...
    def site_distance(self, site1, site2):  # -> floating[Any]:
        ...

class Stack(base.Task):
    """A Stack `Task`: stack the boxes."""

    def __init__(self, n_boxes, fully_observable, random=...) -> None:
        """Initialize an instance of the `Stack` task.

        Args:
          n_boxes: An `int`, number of boxes to stack.
          fully_observable: A `bool`, whether the observation should contain the
            positions and velocities of the boxes and the location of the target.
          random: Optional, either a `numpy.random.RandomState` instance, an
            integer seed for creating a new `RandomState`, or None to select a seed
            automatically (default).
        """
        ...
    def initialize_episode(self, physics):  # -> None:
        """Sets the state of the environment at the start of each episode."""
        ...
    def get_observation(self, physics):  # -> OrderedDict[Unknown, Unknown]:
        """Returns either features or only sensors (to be used with pixels)."""
        ...
    def get_reward(self, physics):  # -> float | NDArray[floating[Any]] | NDArray[bool_]:
        """Returns a reward to the agent."""
        ...
