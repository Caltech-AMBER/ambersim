"""
This type stub file was generated by pyright.
"""

from dm_control import mujoco
from dm_control.suite import base

"""Humanoid Domain."""
_DEFAULT_TIME_LIMIT = ...
_CONTROL_TIMESTEP = ...
_STAND_HEIGHT = ...
_WALK_SPEED = ...
_RUN_SPEED = ...
SUITE = ...

def get_model_and_assets():  # -> tuple[Any, dict[str, Any]]:
    """Returns a tuple containing the model XML string and a dict of assets."""
    ...

@SUITE.add("benchmarking")
def stand(time_limit=..., random=..., environment_kwargs=...):  # -> Environment:
    """Returns the Stand task."""
    ...

@SUITE.add("benchmarking")
def walk(time_limit=..., random=..., environment_kwargs=...):  # -> Environment:
    """Returns the Walk task."""
    ...

@SUITE.add("benchmarking")
def run(time_limit=..., random=..., environment_kwargs=...):  # -> Environment:
    """Returns the Run task."""
    ...

@SUITE.add()
def run_pure_state(time_limit=..., random=..., environment_kwargs=...):  # -> Environment:
    """Returns the Run task."""
    ...

class Physics(mujoco.Physics):
    """Physics simulation with additional features for the Walker domain."""

    def torso_upright(self):
        """Returns projection from z-axes of torso to the z-axes of world."""
        ...
    def head_height(self):
        """Returns the height of the torso."""
        ...
    def center_of_mass_position(self):
        """Returns position of the center-of-mass."""
        ...
    def center_of_mass_velocity(self):
        """Returns the velocity of the center-of-mass."""
        ...
    def torso_vertical_orientation(self):
        """Returns the z-projection of the torso orientation matrix."""
        ...
    def joint_angles(self):
        """Returns the state without global orientation or position."""
        ...
    def extremities(self):  # -> NDArray[Unknown]:
        """Returns end effector positions in egocentric frame."""
        ...

class Humanoid(base.Task):
    """A humanoid task."""

    def __init__(self, move_speed, pure_state, random=...) -> None:
        """Initializes an instance of `Humanoid`.

        Args:
          move_speed: A float. If this value is zero, reward is given simply for
            standing up. Otherwise this specifies a target horizontal velocity for
            the walking task.
          pure_state: A bool. Whether the observations consist of the pure MuJoCo
            state or includes some useful features thereof.
          random: Optional, either a `numpy.random.RandomState` instance, an
            integer seed for creating a new `RandomState`, or None to select a seed
            automatically (default).
        """
        ...
    def initialize_episode(self, physics):  # -> None:
        """Sets the state of the environment at the start of each episode.

        Args:
          physics: An instance of `Physics`.

        """
        ...
    def get_observation(self, physics):  # -> OrderedDict[Unknown, Unknown]:
        """Returns either the pure state or a set of egocentric features."""
        ...
    def get_reward(self, physics):  # -> Any:
        """Returns a reward to the agent."""
        ...
