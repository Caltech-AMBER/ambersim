"""
This type stub file was generated by pyright.
"""

from dm_control import mujoco
from dm_control.suite import base

"""Point-mass domain."""
_DEFAULT_TIME_LIMIT = ...
SUITE = ...

def get_model_and_assets():  # -> tuple[Any, dict[str, Any]]:
    """Returns a tuple containing the model XML string and a dict of assets."""
    ...

@SUITE.add("benchmarking", "easy")
def easy(time_limit=..., random=..., environment_kwargs=...):  # -> Environment:
    """Returns the easy point_mass task."""
    ...

@SUITE.add()
def hard(time_limit=..., random=..., environment_kwargs=...):  # -> Environment:
    """Returns the hard point_mass task."""
    ...

class Physics(mujoco.Physics):
    """physics for the point_mass domain."""

    def mass_to_target(self):
        """Returns the vector from mass to target in global coordinate."""
        ...
    def mass_to_target_dist(self):  # -> floating[Any]:
        """Returns the distance from mass to the target."""
        ...

class PointMass(base.Task):
    """A point_mass `Task` to reach target with smooth reward."""

    def __init__(self, randomize_gains, random=...) -> None:
        """Initialize an instance of `PointMass`.

        Args:
          randomize_gains: A `bool`, whether to randomize the actuator gains.
          random: Optional, either a `numpy.random.RandomState` instance, an
            integer seed for creating a new `RandomState`, or None to select a seed
            automatically (default).
        """
        ...
    def initialize_episode(self, physics):  # -> None:
        """Sets the state of the environment at the start of each episode.

           If _randomize_gains is True, the relationship between the controls and
           the joints is randomized, so that each control actuates a random linear
           combination of joints.

        Args:
          physics: An instance of `mujoco.Physics`.
        """
        ...
    def get_observation(self, physics):  # -> OrderedDict[Unknown, Unknown]:
        """Returns an observation of the state."""
        ...
    def get_reward(self, physics):  # -> Any:
        """Returns a reward to the agent."""
        ...
