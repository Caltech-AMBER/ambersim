"""
This type stub file was generated by pyright.
"""

from dm_control import mujoco
from dm_control.suite import base

"""Finger Domain."""
_DEFAULT_TIME_LIMIT = ...
_CONTROL_TIMESTEP = ...
_EASY_TARGET_SIZE = ...
_HARD_TARGET_SIZE = ...
_INITIAL_SPIN_VELOCITY = ...
_STOP_VELOCITY = ...
_SPIN_VELOCITY = ...
SUITE = ...

def get_model_and_assets():  # -> tuple[Any, dict[str, Any]]:
    """Returns a tuple containing the model XML string and a dict of assets."""
    ...

@SUITE.add("benchmarking")
def spin(time_limit=..., random=..., environment_kwargs=...):  # -> Environment:
    """Returns the Spin task."""
    ...

@SUITE.add("benchmarking")
def turn_easy(time_limit=..., random=..., environment_kwargs=...):  # -> Environment:
    """Returns the easy Turn task."""
    ...

@SUITE.add("benchmarking")
def turn_hard(time_limit=..., random=..., environment_kwargs=...):  # -> Environment:
    """Returns the hard Turn task."""
    ...

class Physics(mujoco.Physics):
    """Physics simulation with additional features for the Finger domain."""

    def touch(self):  # -> Any:
        """Returns logarithmically scaled signals from the two touch sensors."""
        ...
    def hinge_velocity(self):
        """Returns the velocity of the hinge joint."""
        ...
    def tip_position(self):
        """Returns the (x,z) position of the tip relative to the hinge."""
        ...
    def bounded_position(self):  # -> NDArray[Unknown]:
        """Returns the positions, with the hinge angle replaced by tip position."""
        ...
    def velocity(self):
        """Returns the velocities (extracted from sensordata)."""
        ...
    def target_position(self):
        """Returns the (x,z) position of the target relative to the hinge."""
        ...
    def to_target(self):
        """Returns the vector from the tip to the target."""
        ...
    def dist_to_target(self):
        """Returns the signed distance to the target surface, negative is inside."""
        ...

class Spin(base.Task):
    """A Finger `Task` to spin the stopped body."""

    def __init__(self, random=...) -> None:
        """Initializes a new `Spin` instance.

        Args:
          random: Optional, either a `numpy.random.RandomState` instance, an
            integer seed for creating a new `RandomState`, or None to select a seed
            automatically (default).
        """
        ...
    def initialize_episode(self, physics):  # -> None:
        ...
    def get_observation(self, physics):  # -> OrderedDict[Unknown, Unknown]:
        """Returns state and touch sensors, and target info."""
        ...
    def get_reward(self, physics):  # -> float:
        """Returns a sparse reward."""
        ...

class Turn(base.Task):
    """A Finger `Task` to turn the body to a target angle."""

    def __init__(self, target_radius, random=...) -> None:
        """Initializes a new `Turn` instance.

        Args:
          target_radius: Radius of the target site, which specifies the goal angle.
          random: Optional, either a `numpy.random.RandomState` instance, an
            integer seed for creating a new `RandomState`, or None to select a seed
            automatically (default).
        """
        ...
    def initialize_episode(self, physics):  # -> None:
        ...
    def get_observation(self, physics):  # -> OrderedDict[Unknown, Unknown]:
        """Returns state, touch sensors, and target info."""
        ...
    def get_reward(self, physics):  # -> float:
        ...
