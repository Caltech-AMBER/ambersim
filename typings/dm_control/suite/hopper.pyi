"""
This type stub file was generated by pyright.
"""

from dm_control import mujoco
from dm_control.suite import base

"""Hopper domain."""
SUITE = ...
_CONTROL_TIMESTEP = ...
_DEFAULT_TIME_LIMIT = ...
_STAND_HEIGHT = ...
_HOP_SPEED = ...

def get_model_and_assets():  # -> tuple[Any, dict[str, Any]]:
    """Returns a tuple containing the model XML string and a dict of assets."""
    ...

@SUITE.add("benchmarking")
def stand(time_limit=..., random=..., environment_kwargs=...):  # -> Environment:
    """Returns a Hopper that strives to stand upright, balancing its pose."""
    ...

@SUITE.add("benchmarking")
def hop(time_limit=..., random=..., environment_kwargs=...):  # -> Environment:
    """Returns a Hopper that strives to hop forward."""
    ...

class Physics(mujoco.Physics):
    """Physics simulation with additional features for the Hopper domain."""

    def height(self):
        """Returns height of torso with respect to foot."""
        ...
    def speed(self):
        """Returns horizontal speed of the Hopper."""
        ...
    def touch(self):  # -> Any:
        """Returns the signals from two foot touch sensors."""
        ...

class Hopper(base.Task):
    """A Hopper's `Task` to train a standing and a jumping Hopper."""

    def __init__(self, hopping, random=...) -> None:
        """Initialize an instance of `Hopper`.

        Args:
          hopping: Boolean, if True the task is to hop forwards, otherwise it is to
            balance upright.
          random: Optional, either a `numpy.random.RandomState` instance, an
            integer seed for creating a new `RandomState`, or None to select a seed
            automatically (default).
        """
        ...
    def initialize_episode(self, physics):  # -> None:
        """Sets the state of the environment at the start of each episode."""
        ...
    def get_observation(self, physics):  # -> OrderedDict[Unknown, Unknown]:
        """Returns an observation of positions, velocities and touch sensors."""
        ...
    def get_reward(self, physics):  # -> float | NDArray[floating[Any]] | NDArray[bool_] | Any:
        """Returns a reward applicable to the performed task."""
        ...
