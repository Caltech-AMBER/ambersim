"""
This type stub file was generated by pyright.
"""

from dm_control import mujoco
from dm_control.suite import base

"""Reacher domain."""
SUITE = ...
_DEFAULT_TIME_LIMIT = ...
_BIG_TARGET = ...
_SMALL_TARGET = ...

def get_model_and_assets():  # -> tuple[Any, dict[str, Any]]:
    """Returns a tuple containing the model XML string and a dict of assets."""
    ...

@SUITE.add("benchmarking", "easy")
def easy(time_limit=..., random=..., environment_kwargs=...):  # -> Environment:
    """Returns reacher with sparse reward with 5e-2 tol and randomized target."""
    ...

@SUITE.add("benchmarking")
def hard(time_limit=..., random=..., environment_kwargs=...):  # -> Environment:
    """Returns reacher with sparse reward with 1e-2 tol and randomized target."""
    ...

class Physics(mujoco.Physics):
    """Physics simulation with additional features for the Reacher domain."""

    def finger_to_target(self):
        """Returns the vector from target to finger in global coordinates."""
        ...
    def finger_to_target_dist(self):  # -> floating[Any]:
        """Returns the signed distance between the finger and target surface."""
        ...

class Reacher(base.Task):
    """A reacher `Task` to reach the target."""

    def __init__(self, target_size, random=...) -> None:
        """Initialize an instance of `Reacher`.

        Args:
          target_size: A `float`, tolerance to determine whether finger reached the
              target.
          random: Optional, either a `numpy.random.RandomState` instance, an
            integer seed for creating a new `RandomState`, or None to select a seed
            automatically (default).
        """
        ...
    def initialize_episode(self, physics):  # -> None:
        """Sets the state of the environment at the start of each episode."""
        ...
    def get_observation(self, physics):  # -> OrderedDict[Unknown, Unknown]:
        """Returns an observation of the state and the target position."""
        ...
    def get_reward(self, physics):  # -> float | NDArray[Any]:
        ...
