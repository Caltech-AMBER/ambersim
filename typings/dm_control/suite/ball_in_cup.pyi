"""
This type stub file was generated by pyright.
"""

from dm_control import mujoco
from dm_control.suite import base

"""Ball-in-Cup Domain."""
_DEFAULT_TIME_LIMIT = ...
_CONTROL_TIMESTEP = ...
SUITE = ...

def get_model_and_assets():  # -> tuple[Any, dict[str, Any]]:
    """Returns a tuple containing the model XML string and a dict of assets."""
    ...

@SUITE.add("benchmarking", "easy")
def catch(time_limit=..., random=..., environment_kwargs=...):  # -> Environment:
    """Returns the Ball-in-Cup task."""
    ...

class Physics(mujoco.Physics):
    """Physics with additional features for the Ball-in-Cup domain."""

    def ball_to_target(self):
        """Returns the vector from the ball to the target."""
        ...
    def in_target(self):  # -> float:
        """Returns 1 if the ball is in the target, 0 otherwise."""
        ...

class BallInCup(base.Task):
    """The Ball-in-Cup task. Put the ball in the cup."""

    def initialize_episode(self, physics):  # -> None:
        """Sets the state of the environment at the start of each episode.

        Args:
          physics: An instance of `Physics`.

        """
        ...
    def get_observation(self, physics):  # -> OrderedDict[Unknown, Unknown]:
        """Returns an observation of the state."""
        ...
    def get_reward(self, physics):
        """Returns a sparse reward."""
        ...
