"""
This type stub file was generated by pyright.
"""

from dm_control import mujoco
from dm_control.suite import base

"""Cartpole domain."""
_DEFAULT_TIME_LIMIT = ...
SUITE = ...

def get_model_and_assets(num_poles=...):  # -> tuple[Any | Unknown, dict[str, Any]]:
    """Returns a tuple containing the model XML string and a dict of assets."""
    ...

@SUITE.add("benchmarking")
def balance(time_limit=..., random=..., environment_kwargs=...):  # -> Environment:
    """Returns the Cartpole Balance task."""
    ...

@SUITE.add("benchmarking")
def balance_sparse(time_limit=..., random=..., environment_kwargs=...):  # -> Environment:
    """Returns the sparse reward variant of the Cartpole Balance task."""
    ...

@SUITE.add("benchmarking")
def swingup(time_limit=..., random=..., environment_kwargs=...):  # -> Environment:
    """Returns the Cartpole Swing-Up task."""
    ...

@SUITE.add("benchmarking")
def swingup_sparse(time_limit=..., random=..., environment_kwargs=...):  # -> Environment:
    """Returns the sparse reward variant of the Cartpole Swing-Up task."""
    ...

@SUITE.add()
def two_poles(time_limit=..., random=..., environment_kwargs=...):  # -> Environment:
    """Returns the Cartpole Balance task with two poles."""
    ...

@SUITE.add()
def three_poles(time_limit=..., random=..., num_poles=..., sparse=..., environment_kwargs=...):  # -> Environment:
    """Returns the Cartpole Balance task with three or more poles."""
    ...

class Physics(mujoco.Physics):
    """Physics simulation with additional features for the Cartpole domain."""

    def cart_position(self):
        """Returns the position of the cart."""
        ...
    def angular_vel(self):
        """Returns the angular velocity of the pole."""
        ...
    def pole_angle_cosine(self):
        """Returns the cosine of the pole angle."""
        ...
    def bounded_position(self):  # -> NDArray[Unknown]:
        """Returns the state, with pole angle split into sin/cos."""
        ...

class Balance(base.Task):
    """A Cartpole `Task` to balance the pole.

    State is initialized either close to the target configuration or at a random
    configuration.
    """

    _CART_RANGE = ...
    _ANGLE_COSINE_RANGE = ...
    def __init__(self, swing_up, sparse, random=...) -> None:
        """Initializes an instance of `Balance`.

        Args:
          swing_up: A `bool`, which if `True` sets the cart to the middle of the
            slider and the pole pointing towards the ground. Otherwise, sets the
            cart to a random position on the slider and the pole to a random
            near-vertical position.
          sparse: A `bool`, whether to return a sparse or a smooth reward.
          random: Optional, either a `numpy.random.RandomState` instance, an
            integer seed for creating a new `RandomState`, or None to select a seed
            automatically (default).
        """
        ...
    def initialize_episode(self, physics):  # -> None:
        """Sets the state of the environment at the start of each episode.

        Initializes the cart and pole according to `swing_up`, and in both cases
        adds a small random initial velocity to break symmetry.

        Args:
          physics: An instance of `Physics`.
        """
        ...
    def get_observation(self, physics):  # -> OrderedDict[Unknown, Unknown]:
        """Returns an observation of the (bounded) physics state."""
        ...
    def get_reward(self, physics):  # -> Any:
        """Returns a sparse or a smooth reward, as specified in the constructor."""
        ...
