"""
This type stub file was generated by pyright.
"""

from dm_control import mujoco
from dm_control.suite import base

"""Fish Domain."""
_DEFAULT_TIME_LIMIT = ...
_CONTROL_TIMESTEP = ...
_JOINTS = ...
SUITE = ...

def get_model_and_assets():  # -> tuple[Any, dict[str, Any]]:
    """Returns a tuple containing the model XML string and a dict of assets."""
    ...

@SUITE.add("benchmarking")
def upright(time_limit=..., random=..., environment_kwargs=...):  # -> Environment:
    """Returns the Fish Upright task."""
    ...

@SUITE.add("benchmarking")
def swim(time_limit=..., random=..., environment_kwargs=...):  # -> Environment:
    """Returns the Fish Swim task."""
    ...

class Physics(mujoco.Physics):
    """Physics simulation with additional features for the Fish domain."""

    def upright(self):
        """Returns projection from z-axes of torso to the z-axes of worldbody."""
        ...
    def torso_velocity(self):
        """Returns velocities and angular velocities of the torso."""
        ...
    def joint_velocities(self):
        """Returns the joint velocities."""
        ...
    def joint_angles(self):
        """Returns the joint positions."""
        ...
    def mouth_to_target(self):
        """Returns a vector, from mouth to target in local coordinate of mouth."""
        ...

class Upright(base.Task):
    """A Fish `Task` for getting the torso upright with smooth reward."""

    def __init__(self, random=...) -> None:
        """Initializes an instance of `Upright`.

        Args:
          random: Either an existing `numpy.random.RandomState` instance, an
            integer seed for creating a new `RandomState`, or None to select a seed
            automatically.
        """
        ...
    def initialize_episode(self, physics):  # -> None:
        """Randomizes the tail and fin angles and the orientation of the Fish."""
        ...
    def get_observation(self, physics):  # -> OrderedDict[Unknown, Unknown]:
        """Returns an observation of joint angles, velocities and uprightness."""
        ...
    def get_reward(self, physics):  # -> float | NDArray[Any]:
        """Returns a smooth reward."""
        ...

class Swim(base.Task):
    """A Fish `Task` for swimming with smooth reward."""

    def __init__(self, random=...) -> None:
        """Initializes an instance of `Swim`.

        Args:
          random: Optional, either a `numpy.random.RandomState` instance, an
            integer seed for creating a new `RandomState`, or None to select a seed
            automatically (default).
        """
        ...
    def initialize_episode(self, physics):  # -> None:
        """Sets the state of the environment at the start of each episode."""
        ...
    def get_observation(self, physics):  # -> OrderedDict[Unknown, Unknown]:
        """Returns an observation of joints, target direction and velocities."""
        ...
    def get_reward(self, physics):
        """Returns a smooth reward."""
        ...
