"""
This type stub file was generated by pyright.
"""

from dm_control import mujoco
from dm_control.suite import base

"""Acrobot domain."""
_DEFAULT_TIME_LIMIT = ...
SUITE = ...

def get_model_and_assets():  # -> tuple[Any, dict[str, Any]]:
    """Returns a tuple containing the model XML string and a dict of assets."""
    ...

@SUITE.add("benchmarking")
def swingup(time_limit=..., random=..., environment_kwargs=...):  # -> Environment:
    """Returns Acrobot balance task."""
    ...

@SUITE.add("benchmarking")
def swingup_sparse(time_limit=..., random=..., environment_kwargs=...):  # -> Environment:
    """Returns Acrobot sparse balance."""
    ...

class Physics(mujoco.Physics):
    """Physics simulation with additional features for the Acrobot domain."""

    def horizontal(self):
        """Returns horizontal (x) component of body frame z-axes."""
        ...
    def vertical(self):
        """Returns vertical (z) component of body frame z-axes."""
        ...
    def to_target(self):  # -> floating[Any]:
        """Returns the distance from the tip to the target."""
        ...
    def orientations(self):  # -> NDArray[Unknown]:
        """Returns the sines and cosines of the pole angles."""
        ...

class Balance(base.Task):
    """An Acrobot `Task` to swing up and balance the pole."""

    def __init__(self, sparse, random=...) -> None:
        """Initializes an instance of `Balance`.

        Args:
          sparse: A `bool` specifying whether to use a sparse (indicator) reward.
          random: Optional, either a `numpy.random.RandomState` instance, an
            integer seed for creating a new `RandomState`, or None to select a seed
            automatically (default).
        """
        ...
    def initialize_episode(self, physics):  # -> None:
        """Sets the state of the environment at the start of each episode.

        Shoulder and elbow are set to a random position between [-pi, pi).

        Args:
          physics: An instance of `Physics`.
        """
        ...
    def get_observation(self, physics):  # -> OrderedDict[Unknown, Unknown]:
        """Returns an observation of pole orientation and angular velocities."""
        ...
    def get_reward(self, physics):  # -> float | NDArray[Any]:
        """Returns a sparse or a smooth reward, as specified in the constructor."""
        ...
