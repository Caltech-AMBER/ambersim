"""
This type stub file was generated by pyright.
"""

from dm_control import mujoco
from dm_control.mujoco.wrapper import mjbindings
from dm_control.suite import base

"""Quadruped Domain."""
enums = mjbindings.enums
mjlib = mjbindings.mjlib
_DEFAULT_TIME_LIMIT = ...
_CONTROL_TIMESTEP = ...
_RUN_SPEED = ...
_WALK_SPEED = ...
_HEIGHTFIELD_ID = ...
_TERRAIN_SMOOTHNESS = ...
_TERRAIN_BUMP_SCALE = ...
_TOES = ...
_WALLS = ...
SUITE = ...

def make_model(floor_size=..., terrain=..., rangefinders=..., walls_and_ball=...):
    """Returns the model XML string."""
    ...

@SUITE.add()
def walk(time_limit=..., random=..., environment_kwargs=...):  # -> Environment:
    """Returns the Walk task."""
    ...

@SUITE.add()
def run(time_limit=..., random=..., environment_kwargs=...):  # -> Environment:
    """Returns the Run task."""
    ...

@SUITE.add()
def escape(time_limit=..., random=..., environment_kwargs=...):  # -> Environment:
    """Returns the Escape task."""
    ...

@SUITE.add()
def fetch(time_limit=..., random=..., environment_kwargs=...):  # -> Environment:
    """Returns the Fetch task."""
    ...

class Physics(mujoco.Physics):
    """Physics simulation with additional features for the Quadruped domain."""

    def torso_upright(self):  # -> NDArray[Unknown]:
        """Returns the dot-product of the torso z-axis and the global z-axis."""
        ...
    def torso_velocity(self):
        """Returns the velocity of the torso, in the local frame."""
        ...
    def egocentric_state(self):  # -> NDArray[Unknown]:
        """Returns the state without global orientation or position."""
        ...
    def toe_positions(self):
        """Returns toe positions in egocentric frame."""
        ...
    def force_torque(self):  # -> Any:
        """Returns scaled force/torque sensor readings at the toes."""
        ...
    def imu(self):
        """Returns IMU-like sensor readings."""
        ...
    def rangefinder(self):  # -> NDArray[Any]:
        """Returns scaled rangefinder sensor readings."""
        ...
    def origin_distance(self):  # -> NDArray[floating[Any]]:
        """Returns the distance from the origin to the workspace."""
        ...
    def origin(self):
        """Returns origin position in the torso frame."""
        ...
    def ball_state(self):  # -> ndarray[Any, Unknown]:
        """Returns ball position and velocity relative to the torso frame."""
        ...
    def target_position(self):
        """Returns target position in torso frame."""
        ...
    def ball_to_target_distance(self):  # -> floating[Any]:
        """Returns horizontal distance from the ball to the target."""
        ...
    def self_to_ball_distance(self):  # -> floating[Any]:
        """Returns horizontal distance from the quadruped workspace to the ball."""
        ...

class Move(base.Task):
    """A quadruped task solved by moving forward at a designated speed."""

    def __init__(self, desired_speed, random=...) -> None:
        """Initializes an instance of `Move`.

        Args:
          desired_speed: A float. If this value is zero, reward is given simply
            for standing upright. Otherwise this specifies the horizontal velocity
            at which the velocity-dependent reward component is maximized.
          random: Optional, either a `numpy.random.RandomState` instance, an
            integer seed for creating a new `RandomState`, or None to select a seed
            automatically (default).
        """
        ...
    def initialize_episode(self, physics):  # -> None:
        """Sets the state of the environment at the start of each episode.

        Args:
          physics: An instance of `Physics`.

        """
        ...
    def get_observation(self, physics):  # -> OrderedDict[Unknown, Unknown]:
        """Returns an observation to the agent."""
        ...
    def get_reward(self, physics):  # -> float | NDArray[floating[Any]] | NDArray[bool_]:
        """Returns a reward to the agent."""
        ...

class Escape(base.Task):
    """A quadruped task solved by escaping a bowl-shaped terrain."""

    def initialize_episode(self, physics):  # -> None:
        """Sets the state of the environment at the start of each episode.

        Args:
          physics: An instance of `Physics`.

        """
        ...
    def get_observation(self, physics):  # -> OrderedDict[Unknown, Unknown]:
        """Returns an observation to the agent."""
        ...
    def get_reward(self, physics):  # -> float | NDArray[floating[Any]] | NDArray[bool_]:
        """Returns a reward to the agent."""
        ...

class Fetch(base.Task):
    """A quadruped task solved by bringing a ball to the origin."""

    def initialize_episode(self, physics):  # -> None:
        """Sets the state of the environment at the start of each episode.

        Args:
          physics: An instance of `Physics`.

        """
        ...
    def get_observation(self, physics):  # -> OrderedDict[Unknown, Unknown]:
        """Returns an observation to the agent."""
        ...
    def get_reward(self, physics):  # -> float | NDArray[floating[Any]]:
        """Returns a reward to the agent."""
        ...
