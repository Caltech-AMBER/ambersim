"""
This type stub file was generated by pyright.
"""

from dm_control.rl import control

"""Base class for tasks in the Control Suite."""

class Task(control.Task):
    """Base class for tasks in the Control Suite.

    Actions are mapped directly to the states of MuJoCo actuators: each element of
    the action array is used to set the control input for a single actuator. The
    ordering of the actuators is the same as in the corresponding MJCF XML file.

    Attributes:
      random: A `numpy.random.RandomState` instance. This should be used to
        generate all random variables associated with the task, such as random
        starting states, observation noise* etc.

    *If sensor noise is enabled in the MuJoCo model then this will be generated
    using MuJoCo's internal RNG, which has its own independent state.
    """

    def __init__(self, random=...) -> None:
        """Initializes a new continuous control task.

        Args:
          random: Optional, either a `numpy.random.RandomState` instance, an integer
            seed for creating a new `RandomState`, or None to select a seed
            automatically (default).
        """
        ...
    @property
    def random(self):  # -> RandomState:
        """Task-specific `numpy.random.RandomState` instance."""
        ...
    def action_spec(self, physics):  # -> BoundedArray:
        """Returns a `BoundedArraySpec` matching the `physics` actuators."""
        ...
    def initialize_episode(self, physics):  # -> None:
        """Resets geom colors to their defaults after starting a new episode.

        Subclasses of `base.Task` must delegate to this method after performing
        their own initialization.

        Args:
          physics: An instance of `mujoco.Physics`.
        """
        ...
    def before_step(self, action, physics):  # -> None:
        """Sets the control signal for the actuators to values in `action`."""
        ...
    def after_step(self, physics):  # -> None:
        """Modifies colors according to the reward."""
        ...
    @property
    def visualize_reward(self):  # -> bool:
        ...
    @visualize_reward.setter
    def visualize_reward(self, value):  # -> None:
        ...

_MATERIALS = ...
_DEFAULT = ...
_HIGHLIGHT = ...
