"""
This type stub file was generated by pyright.
"""

import collections

"""Container classes used in control domains."""
_NAME_ALREADY_EXISTS = ...

class TaggedTasks(collections.abc.Mapping):
    """Maps task names to their corresponding factory functions with tags.

    To store a function in a `TaggedTasks` container, we can use its `.add`
    decorator:

    ```python
    tasks = TaggedTasks()

    @tasks.add('easy', 'stable')
    def example_task():
      ...
      return environment

    environment_factory = tasks['example_task']

    # Or to restrict to a given tag:
    environment_factory = tasks.tagged('easy')['example_task']
    ```
    """

    def __init__(self, allow_overriding_keys=...) -> None:
        """Initializes a new `TaggedTasks` container.

        Args:
          allow_overriding_keys: Boolean, whether `add` can override existing keys
            within the container. If False (default), calling `add` multiple times
            with the same function name will result in a `ValueError`.
        """
        ...
    def add(self, *tags):  # -> (factory_func: Unknown) -> Unknown:
        """Decorator that adds a factory function to the container with tags.

        Args:
          *tags: Strings specifying the tags for this function.

        Returns:
          The same function.

        Raises:
          ValueError: if a function with the same name already exists within the
            container and `allow_overriding_keys` is False.
        """
        ...
    def tagged(self, *tags):  # -> dict[Unknown, Unknown]:
        """Returns a (possibly empty) dict of functions matching all the given tags.

        Args:
          *tags: Strings specifying tags to query by.

        Returns:
          A dict of `{name: function}` containing all the functions that are tagged
          by all of the strings in `tags`.
        """
        ...
    def tags(self):  # -> list[Unknown]:
        """Returns a list of all the tags in this container."""
        ...
    def __getitem__(self, k): ...
    def __iter__(self):  # -> Iterator[Unknown]:
        ...
    def __len__(self):  # -> int:
        ...
    def __repr__(self):  # -> str:
        ...
