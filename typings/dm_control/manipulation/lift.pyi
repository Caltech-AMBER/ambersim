"""
This type stub file was generated by pyright.
"""

from dm_control import composer
from dm_control.entities import props
from dm_control.manipulation.shared import registry, tags

"""Tasks where the goal is to elevate a prop."""
_LiftWorkspace = ...
_DUPLO_WORKSPACE = ...
_BOX_SIZE = ...
_BOX_MASS = ...
_BOX_WORKSPACE = ...
_DISTANCE_TO_LIFT = ...

class _VertexSitesMixin:
    """Mixin class that adds sites corresponding to the vertices of a box."""

    @property
    def vertices(self):  # -> list[Unknown]:
        ...

class _BoxWithVertexSites(props.Primitive, _VertexSitesMixin):
    """Subclass of `Box` with sites marking the vertices of the box geom."""

    ...

class _DuploWithVertexSites(props.Duplo, _VertexSitesMixin):
    """Subclass of `Duplo` with sites marking the vertices of its sensor site."""

    ...

class Lift(composer.Task):
    """A task where the goal is to elevate a prop."""

    def __init__(self, arena, arm, hand, prop, obs_settings, workspace, control_timestep) -> None:
        """Initializes a new `Lift` task.

        Args:
          arena: `composer.Entity` instance.
          arm: `robot_base.RobotArm` instance.
          hand: `robot_base.RobotHand` instance.
          prop: `composer.Entity` instance.
          obs_settings: `observations.ObservationSettings` instance.
          workspace: `_LiftWorkspace` specifying the placement of the prop and TCP.
          control_timestep: Float specifying the control timestep in seconds.
        """
        ...
    @property
    def root_entity(self):  # -> Unknown:
        ...
    @property
    def arm(self):  # -> Unknown:
        ...
    @property
    def hand(self):  # -> Unknown:
        ...
    @property
    def task_observables(self):  # -> OrderedDict[Unknown, Unknown]:
        ...
    def get_reward(self, physics):  # -> float | NDArray[Any]:
        ...
    def initialize_episode(self, physics, random_state):  # -> None:
        ...

@registry.add(tags.FEATURES)
def lift_brick_features():  # -> Lift:
    ...

@registry.add(tags.VISION)
def lift_brick_vision():  # -> Lift:
    ...

@registry.add(tags.FEATURES)
def lift_large_box_features():  # -> Lift:
    ...

@registry.add(tags.VISION)
def lift_large_box_vision():  # -> Lift:
    ...
