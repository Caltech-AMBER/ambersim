"""
This type stub file was generated by pyright.
"""

from dm_control import composer
from dm_control.manipulation.shared import registry, tags

"""A task where the goal is to move the hand close to a target prop or site."""
_ReachWorkspace = ...
_PROP_Z_OFFSET = ...
_DUPLO_WORKSPACE = ...
_SITE_WORKSPACE = ...
_TARGET_RADIUS = ...

class Reach(composer.Task):
    """Bring the hand close to a target prop or site."""

    def __init__(self, arena, arm, hand, prop, obs_settings, workspace, control_timestep) -> None:
        """Initializes a new `Reach` task.

        Args:
          arena: `composer.Entity` instance.
          arm: `robot_base.RobotArm` instance.
          hand: `robot_base.RobotHand` instance.
          prop: `composer.Entity` instance specifying the prop to reach to, or None
            in which case the target is a fixed site whose position is specified by
            the workspace.
          obs_settings: `observations.ObservationSettings` instance.
          workspace: `_ReachWorkspace` specifying the placement of the prop and TCP.
          control_timestep: Float specifying the control timestep in seconds.
        """
        ...
    @property
    def root_entity(self):  # -> Unknown:
        ...
    @property
    def arm(self):  # -> Unknown:
        ...
    @property
    def hand(self):  # -> Unknown:
        ...
    @property
    def task_observables(self):  # -> OrderedDict[Unknown, Unknown]:
        ...
    def get_reward(self, physics):  # -> float | NDArray[Any]:
        ...
    def initialize_episode(self, physics, random_state):  # -> None:
        ...

@registry.add(tags.FEATURES, tags.EASY)
def reach_duplo_features():  # -> Reach:
    ...

@registry.add(tags.VISION, tags.EASY)
def reach_duplo_vision():  # -> Reach:
    ...

@registry.add(tags.FEATURES, tags.EASY)
def reach_site_features():  # -> Reach:
    ...

@registry.add(tags.VISION, tags.EASY)
def reach_site_vision():  # -> Reach:
    ...
