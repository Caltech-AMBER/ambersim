"""
This type stub file was generated by pyright.
"""

from dm_control import composer
from dm_control.composer import define
from dm_control.composer.observation import observable
from dm_control.manipulation.shared import registry, tags

"""A task where the goal is to place a movable prop on top of a fixed prop."""
_PlaceWorkspace = ...
_TARGET_RADIUS = ...
_PEDESTAL_RADIUS = ...
_PROP_Z_OFFSET = ...
_WORKSPACE = ...

class SphereCradle(composer.Entity):
    """A concave shape for easy placement."""

    _SPHERE_COUNT = ...
    @property
    def mjcf_model(self): ...

class Pedestal(composer.Entity):
    """A narrow pillar to elevate the target."""

    _HEIGHT = ...
    @property
    def mjcf_model(self): ...
    @property
    def target_site(self): ...

class PedestalObservables(composer.Observables):
    """Observables for the `Pedestal` prop."""

    @define.observable
    def position(self):  # -> MJCFFeature:
        ...

class Place(composer.Task):
    """Place the prop on top of another fixed prop held up by a pedestal."""

    def __init__(self, arena, arm, hand, prop, obs_settings, workspace, control_timestep, cradle) -> None:
        """Initializes a new `Place` task.

        Args:
          arena: `composer.Entity` instance.
          arm: `robot_base.RobotArm` instance.
          hand: `robot_base.RobotHand` instance.
          prop: `composer.Entity` instance.
          obs_settings: `observations.ObservationSettings` instance.
          workspace: A `_PlaceWorkspace` instance.
          control_timestep: Float specifying the control timestep in seconds.
          cradle: `composer.Entity` onto which the `prop` must be placed.
        """
        ...
    @property
    def root_entity(self):  # -> Unknown:
        ...
    @property
    def arm(self):  # -> Unknown:
        ...
    @property
    def hand(self):  # -> Unknown:
        ...
    @property
    def task_observables(self):  # -> OrderedDict[Unknown, Unknown]:
        ...
    def initialize_episode(self, physics, random_state):  # -> None:
        ...
    def get_reward(self, physics):  # -> float | NDArray[floating[Any]]:
        ...

@registry.add(tags.FEATURES)
def place_brick_features():  # -> Place:
    ...

@registry.add(tags.VISION)
def place_brick_vision():  # -> Place:
    ...

@registry.add(tags.FEATURES)
def place_cradle_features():  # -> Place:
    ...

@registry.add(tags.VISION)
def place_cradle_vision():  # -> Place:
    ...
