"""
This type stub file was generated by pyright.
"""

from dm_control import composer
from dm_control.manipulation.shared import registry, tags
from dm_control.mujoco.wrapper import mjbindings

"""Tasks involving assembly and/or disassembly of bricks."""
mjlib = mjbindings.mjlib
_BrickWorkspace = ...
_PROP_Z_OFFSET = ...
_WORKSPACE = ...
_HINT_ALPHA = ...
_CLOSE_THRESHOLD = ...
_CLICK_THRESHOLD = ...

class _Common(composer.Task):
    """Common components of brick tasks."""

    def __init__(self, arena, arm, hand, num_bricks, obs_settings, workspace, control_timestep) -> None: ...
    @property
    def task_observables(self):  # -> OrderedDict[Unknown, Unknown]:
        ...
    @property
    def root_entity(self):  # -> Unknown:
        ...
    @property
    def arm(self):  # -> Unknown:
        ...
    @property
    def hand(self):  # -> Unknown:
        ...

class Stack(_Common):
    """Build a stack of Duplo bricks."""

    def __init__(
        self,
        arena,
        arm,
        hand,
        num_bricks,
        target_height,
        moveable_base,
        randomize_order,
        obs_settings,
        workspace,
        control_timestep,
    ) -> None:
        """Initializes a new `Stack` task.

        Args:
          arena: `composer.Entity` instance.
          arm: `robot_base.RobotArm` instance.
          hand: `robot_base.RobotHand` instance.
          num_bricks: The total number of bricks; must be between 2 and 6.
          target_height: The target number of bricks in the stack in order to get
            maximum reward. Must be between 2 and `num_bricks`.
          moveable_base: Boolean specifying whether or not the bottom brick should
            be moveable.
          randomize_order: Boolean specifying whether to randomize the desired order
            of bricks in the stack at the start of each episode.
          obs_settings: `observations.ObservationSettings` instance.
          workspace: A `_BrickWorkspace` instance.
          control_timestep: Float specifying the control timestep in seconds.

        Raises:
          ValueError: If `num_bricks` is not between 2 and 6, or if
            `target_height` is not between 2 and `num_bricks - 1`.
        """
        ...
    def initialize_episode_mjcf(self, random_state):  # -> None:
        ...
    def initialize_episode(self, physics, random_state):  # -> None:
        ...
    def get_reward(self, physics): ...

class Reassemble(_Common):
    """Disassemble a stack of Duplo bricks and reassemble it in another order."""

    def __init__(
        self,
        arena,
        arm,
        hand,
        num_bricks,
        randomize_initial_order,
        randomize_desired_order,
        obs_settings,
        workspace,
        control_timestep,
    ) -> None:
        """Initializes a new `Reassemble` task.

        Args:
          arena: `composer.Entity` instance.
          arm: `robot_base.RobotArm` instance.
          hand: `robot_base.RobotHand` instance.
          num_bricks: The total number of bricks; must be between 2 and 6.
          randomize_initial_order: Boolean specifying whether to randomize the
            initial order  of bricks in the stack at the start of each episode.
          randomize_desired_order: Boolean specifying whether to independently
            randomize the desired order of bricks in the stack at the start of each
            episode. By default the desired order will be the reverse of the initial
            order, with the exception of the base brick which is always the same as
            in the initial order since it is welded in place.
          obs_settings: `observations.ObservationSettings` instance.
          workspace: A `_BrickWorkspace` instance.
          control_timestep: Float specifying the control timestep in seconds.

        Raises:
          ValueError: If `num_bricks` is not between 2 and 6.
        """
        ...
    def initialize_episode_mjcf(self, random_state):  # -> None:
        ...
    def initialize_episode(self, physics, random_state):  # -> None:
        ...
    def get_reward(self, physics): ...

@registry.add(tags.FEATURES)
def stack_2_bricks_features():  # -> Stack:
    ...

@registry.add(tags.VISION)
def stack_2_bricks_vision():  # -> Stack:
    ...

@registry.add(tags.FEATURES)
def stack_2_bricks_moveable_base_features():  # -> Stack:
    ...

@registry.add(tags.VISION)
def stack_2_bricks_moveable_base_vision():  # -> Stack:
    ...

@registry.add(tags.FEATURES)
def stack_3_bricks_features():  # -> Stack:
    ...

@registry.add(tags.VISION)
def stack_3_bricks_vision():  # -> Stack:
    ...

@registry.add(tags.FEATURES)
def stack_3_bricks_random_order_features():  # -> Stack:
    ...

@registry.add(tags.FEATURES)
def stack_2_of_3_bricks_random_order_features():  # -> Stack:
    ...

@registry.add(tags.VISION)
def stack_2_of_3_bricks_random_order_vision():  # -> Stack:
    ...

@registry.add(tags.FEATURES)
def reassemble_3_bricks_fixed_order_features():  # -> Reassemble:
    ...

@registry.add(tags.VISION)
def reassemble_3_bricks_fixed_order_vision():  # -> Reassemble:
    ...

@registry.add(tags.FEATURES)
def reassemble_5_bricks_random_order_features():  # -> Reassemble:
    ...

@registry.add(tags.VISION)
def reassemble_5_bricks_random_order_vision():  # -> Reassemble:
    ...
