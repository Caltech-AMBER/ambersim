"""
This type stub file was generated by pyright.
"""

import abc

"""Decorators for Entity methods returning elements and observables."""

class cached_property(property):
    """A property that is evaluated only once per object instance."""

    def __init__(self, func, doc=...) -> None: ...
    def __get__(self, obj, cls):  # -> Self@cached_property:
        ...

abstract_observable = abc.abstractproperty

class observable(cached_property):
    """A decorator for base.Observables methods returning an observable.

    The body of the decorated function is evaluated at Entity construction time
    and the observable is cached.
    """

    ...
