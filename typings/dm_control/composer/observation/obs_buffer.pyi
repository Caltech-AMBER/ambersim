"""
This type stub file was generated by pyright.
"""

""""An object that manages the buffering and delaying of observation."""

class InFlightObservation:
    """Represents a delayed observation that may not have arrived yet.

    Attributes:
      arrival: The time at which this observation will be delivered.
      timestamp: The time at which this observation was made.
      delay: The amount of delay between the time at which this observation was
        made and the time at which it is delivered.
      value: The value of this observation.
    """

    __slots__ = ...
    def __init__(self, timestamp, delay, value) -> None: ...
    def __lt__(self, other) -> bool: ...

class Buffer:
    """An object that manages the buffering and delaying of observation."""

    def __init__(self, buffer_size, shape, dtype, pad_with_initial_value=..., strip_singleton_buffer_dim=...) -> None:
        """Initializes this observation buffer.

        Args:
          buffer_size: The size of the buffer returned by `read`. Note
            that this does *not* affect size of the internal buffer held by this
            object, which always grow as large as is necessary in the presence of
            large delays.
          shape: The shape of a single observation held by this buffer, which can
            either be a single integer or an iterable of integers. The shape of the
            buffer returned by `read` will then be
            `(buffer_size, shape[0], ..., shape[n])`, unless `buffer_size == 1`
            and `strip_singleton_buffer_dim == True`.
          dtype: The NumPy dtype of observation entries.
          pad_with_initial_value: (optional) A boolean. If `True` then the buffer
            returned by `read` is padded with the first observation value when there
            are fewer observation entries than `buffer_size`. If `False` then the
            buffer returned by `read` is padded with zeroes.
          strip_singleton_buffer_dim: (optional) A boolean, if `True` and
            `buffer_size == 1` then the leading dimension will not be added to the
            shape of the array returned by `read`.
        """
        ...
    @property
    def shape(
        self,
    ):  # -> tuple[Unknown | Literal[1], ...] | tuple[Unknown | Literal[1], int] | tuple[Unknown, ...] | tuple[int]:
        ...
    @property
    def dtype(self):  # -> Unknown:
        ...
    def insert(self, timestamp, delay, value):  # -> None:
        """Inserts a new observation to the buffer.

        This function implicitly updates the internal "clock" of this buffer to
        the timestamp of the new observation, and the internal buffer is trimmed
        accordingly, i.e. at most `buffer_size` items whose delayed arrival time
        preceeds `timestamp` are kept.

        Args:
          timestamp: The time at which this observation was made.
          delay: The amount of delay between the time at which this observation was
            made and the time at which it is delivered.
          value: The value of this observation.

        Raises:
          ValueError: if `delay` is negative.
        """
        ...
    def read(self, current_time):  # -> NDArray[float64]:
        """Reads the content of the buffer at the given timestamp."""
        ...
    def drop_unobserved_upcoming_items(self, observation_schedule, read_interval):  # -> None:
        """Plans an optimal observation schedule for an upcoming control period.

        This function determines which of the proposed upcoming observations will
        never in fact be delivered and removes them from the observation schedule.

        We assume that observations will only be queried at times that are integer
        multiples of `read_interval`. If more observations are generated during
        the upcoming control step than the `buffer_size` of this `Buffer`
        then of those new observations will never be required. This function takes
        into account the delayed arrival time and existing buffered items in the
        planning process.

        Args:
          observation_schedule: An list of `(timestamp, delay)` tuples, where
            `timestamp` is the time at which the observation value will be produced,
            and `delay` is the amount of time the observation will be delayed by.
            This list will be modified in place.
          read_interval: The time interval between successive calls to `read`.
            We assume that observations will only be queried at times that are
            integer multiples of `read_interval`.
        """
        ...
