"""
This type stub file was generated by pyright.
"""

from dm_control.composer.observation.observable import base

"""Observables that are defined in terms of MJCF elements."""
_BOTH_SEGMENTATION_AND_DEPTH_ENABLED = ...

class MJCFFeature(base.Observable):
    """An observable corresponding to an element in an MJCF model."""

    def __init__(
        self,
        kind,
        mjcf_element,
        update_interval=...,
        buffer_size=...,
        delay=...,
        aggregator=...,
        corruptor=...,
        index=...,
    ) -> None:
        """Initializes this observable.

        Args:
          kind: The name of an attribute of a bound `mjcf.Physics` instance. See the
            docstring for `mjcf.Physics.bind()` for examples showing this syntax.
          mjcf_element: An `mjcf.Element`, or iterable of `mjcf.Element`.
          update_interval: (optional) An integer, number of simulation steps between
            successive updates to the value of this observable.
          buffer_size: (optional) The maximum size of the returned buffer.
            This option is only relevant when used in conjunction with an
            `observation.Updater`. If None, `observation.DEFAULT_BUFFER_SIZE` will
            be used.
          delay: (optional) Number of additional simulation steps that must be
            taken before an observation is returned. This option is only relevant
            when used in conjunction with an`observation.Updater`. If None,
            `observation.DEFAULT_DELAY` will be used.
          aggregator: (optional) Name of an item in `AGGREGATORS` or a callable that
            performs a reduction operation over the first dimension of the buffered
            observation before it is returned. A value of `None` means that no
            aggregation will be performed and the whole buffer will be returned.
          corruptor: (optional) A callable which takes a single observation as
            an argument, modifies it, and returns it. An example use case for this
            is to add random noise to the observation. When used in a
            `BufferedWrapper`, the corruptor is applied to the observation before
            it is added to the buffer. In particular, this means that the aggregator
            operates on corrupted observations.
          index: (optional) An index that is to be applied to an array attribute
            to pick out a slice or particular items. As a syntactic sugar,
            `MJCFFeature` also implements `__getitem__` that returns a copy of the
            same observable with an index applied.

        Raises:
          ValueError: if `mjcf_element` is not an `mjcf.Element`.
        """
        ...
    def __getitem__(self, key):  # -> MJCFFeature:
        ...

class MJCFCamera(base.Observable):
    """An observable corresponding to a camera in an MJCF model."""

    def __init__(
        self,
        mjcf_element,
        height=...,
        width=...,
        update_interval=...,
        buffer_size=...,
        delay=...,
        aggregator=...,
        corruptor=...,
        depth=...,
        segmentation=...,
        scene_option=...,
        render_flag_overrides=...,
    ) -> None:
        """Initializes this observable.

        Args:
          mjcf_element: A <camera> `mjcf.Element`.
          height: (optional) An integer, the height of the rendered image.
          width: (optional) An integer, the width of the rendered image.
          update_interval: (optional) An integer, number of simulation steps between
            successive updates to the value of this observable.
          buffer_size: (optional) The maximum size of the returned buffer.
            This option is only relevant when used in conjunction with an
            `observation.Updater`. If None, `observation.DEFAULT_BUFFER_SIZE` will
            be used.
          delay: (optional) Number of additional simulation steps that must be
            taken before an observation is returned. This option is only relevant
            when used in conjunction with an`observation.Updater`. If None,
            `observation.DEFAULT_DELAY` will be used.
          aggregator: (optional) Name of an item in `AGGREGATORS` or a callable that
            performs a reduction operation over the first dimension of the buffered
            observation before it is returned. A value of `None` means that no
            aggregation will be performed and the whole buffer will be returned.
          corruptor: (optional) A callable which takes a single observation as
            an argument, modifies it, and returns it. An example use case for this
            is to add random noise to the observation. When used in a
            `BufferedWrapper`, the corruptor is applied to the observation before
            it is added to the buffer. In particular, this means that the aggregator
            operates on corrupted observations.
          depth: (optional) A boolean. If `True`, renders a depth image (1-channel)
            instead of RGB (3-channel).
          segmentation: (optional) A boolean. If `True`, renders a segmentation mask
            (2-channel, int32) labeling the objects in the scene with their
            (mjModel ID, mjtObj enum object type) pair. Background pixels are
            set to (-1, -1).
          scene_option: An optional `wrapper.MjvOption` instance that can be used to
            render the scene with custom visualization options. If None then the
            default options will be used.
          render_flag_overrides: Optional mapping specifying rendering flags to
            override. The keys can be either lowercase strings or `mjtRndFlag` enum
            values, and the values are the overridden flag values, e.g.
            `{'wireframe': True}` or `{mujoco.mjtRndFlag.mjRND_WIREFRAME: True}`.
            See `mujoco.mjtRndFlag` for the set of valid flags. Must be None if
            either `depth` or `segmentation` is True.

        Raises:
          ValueError: if `mjcf_element` is not a <camera> element.
          ValueError: if segmentation and depth flags are both set to True.
        """
        ...
    @property
    def height(self):  # -> int:
        ...
    @height.setter
    def height(self, value):  # -> None:
        ...
    @property
    def width(self):  # -> int:
        ...
    @width.setter
    def width(self, value):  # -> None:
        ...
    @property
    def depth(self):  # -> bool:
        ...
    @depth.setter
    def depth(self, value):  # -> None:
        ...
    @property
    def segmentation(self):  # -> bool:
        ...
    @segmentation.setter
    def segmentation(self, value):  # -> None:
        ...
    @property
    def scene_option(self):  # -> None:
        ...
    @scene_option.setter
    def scene_option(self, value):  # -> None:
        ...
    @property
    def render_flag_overrides(self):  # -> None:
        ...
    @render_flag_overrides.setter
    def render_flag_overrides(self, value):  # -> None:
        ...
    @property
    def array_spec(self):  # -> BoundedArray:
        ...
