"""
This type stub file was generated by pyright.
"""

import abc

"""Classes representing observables."""
AGGREGATORS = ...

class Observable(metaclass=abc.ABCMeta):
    """Abstract base class for an observable."""

    def __init__(self, update_interval, buffer_size, delay, aggregator, corruptor) -> None: ...
    @property
    def update_interval(self):  # -> Unknown:
        ...
    @update_interval.setter
    def update_interval(self, value):  # -> None:
        ...
    @property
    def buffer_size(self):  # -> Unknown:
        ...
    @buffer_size.setter
    def buffer_size(self, value):  # -> None:
        ...
    @property
    def delay(self):  # -> Unknown:
        ...
    @delay.setter
    def delay(self, value):  # -> None:
        ...
    @property
    def aggregator(self):  # -> partial[Unknown] | None:
        ...
    @aggregator.setter
    def aggregator(self, value):  # -> None:
        ...
    @property
    def corruptor(self):  # -> Unknown:
        ...
    @corruptor.setter
    def corruptor(self, value):  # -> None:
        ...
    @property
    def enabled(self):  # -> bool:
        ...
    @enabled.setter
    def enabled(self, value):  # -> None:
        ...
    @property
    def array_spec(self):  # -> None:
        """The `ArraySpec` which describes observation arrays from this observable.

        If this property is `None`, then the specification should be inferred by
        actually retrieving an observation from this observable.
        """
        ...
    def observation_callable(self, physics, random_state=...):  # -> (() -> Unknown) | None:
        """A callable which returns a (potentially corrupted) observation."""
        ...
    def __call__(self, physics, random_state=...):
        """Convenience function to just call an observable."""
        ...
    def configure(self, **kwargs):  # -> None:
        """Sets multiple attributes of this observable.

        Args:
          **kwargs: The keyword argument names correspond to the attributes
            being modified.
        Raises:
          AttributeError: If kwargs contained an attribute not in the observable.
        """
        ...

class Generic(Observable):
    """A generic observable defined via a callable."""

    def __init__(
        self, raw_observation_callable, update_interval=..., buffer_size=..., delay=..., aggregator=..., corruptor=...
    ) -> None:
        """Initializes this observable.

        Args:
          raw_observation_callable: A callable which accepts a single argument of
            type `control.base.Physics` and returns the observation value.
          update_interval: (optional) An integer, number of simulation steps between
            successive updates to the value of this observable.
          buffer_size: (optional) The maximum size of the returned buffer.
            This option is only relevant when used in conjunction with an
            `observation.Updater`. If None, `observation.DEFAULT_BUFFER_SIZE` will
            be used.
          delay: (optional) Number of additional simulation steps that must be
            taken before an observation is returned. This option is only relevant
            when used in conjunction with an`observation.Updater`. If None,
            `observation.DEFAULT_DELAY` will be used.
          aggregator: (optional) Name of an item in `AGGREGATORS` or a callable that
            performs a reduction operation over the first dimension of the buffered
            observation before it is returned. A value of `None` means that no
            aggregation will be performed and the whole buffer will be returned.
          corruptor: (optional) A callable which takes a single observation as
            an argument, modifies it, and returns it. An example use case for this
            is to add random noise to the observation. When used in a
            `BufferedWrapper`, the corruptor is applied to the observation before
            it is added to the buffer. In particular, this means that the aggregator
            operates on corrupted observations.
        """
        ...

class MujocoFeature(Observable):
    """An observable corresponding to a named MuJoCo feature."""

    def __init__(
        self, kind, feature_name, update_interval=..., buffer_size=..., delay=..., aggregator=..., corruptor=...
    ) -> None:
        """Initializes this observable.

        Args:
          kind: A string corresponding to a field name in MuJoCo's mjData struct.
          feature_name: A string, or list of strings, or a callable returning
            either, corresponding to the name(s) of an entity in the
            MuJoCo XML model.
          update_interval: (optional) An integer, number of simulation steps between
            successive updates to the value of this observable.
          buffer_size: (optional) The maximum size of the returned buffer.
            This option is only relevant when used in conjunction with an
            `observation.Updater`. If None, `observation.DEFAULT_BUFFER_SIZE` will
            be used.
          delay: (optional) Number of additional simulation steps that must be
            taken before an observation is returned. This option is only relevant
            when used in conjunction with an`observation.Updater`. If None,
            `observation.DEFAULT_DELAY` will be used.
          aggregator: (optional) Name of an item in `AGGREGATORS` or a callable that
            performs a reduction operation over the first dimension of the buffered
            observation before it is returned. A value of `None` means that no
            aggregation will be performed and the whole buffer will be returned.
          corruptor: (optional) A callable which takes a single observation as
            an argument, modifies it, and returns it. An example use case for this
            is to add random noise to the observation. When used in a
            `BufferedWrapper`, the corruptor is applied to the observation before
            it is added to the buffer. In particular, this means that the aggregator
            operates on corrupted observations.
        """
        ...

class MujocoCamera(Observable):
    """An observable corresponding to a MuJoCo camera."""

    def __init__(
        self,
        camera_name,
        height=...,
        width=...,
        update_interval=...,
        buffer_size=...,
        delay=...,
        aggregator=...,
        corruptor=...,
        depth=...,
    ) -> None:
        """Initializes this observable.

        Args:
          camera_name: A string corresponding to the name of a camera in the
            MuJoCo XML model.
          height: (optional) An integer, the height of the rendered image.
          width: (optional) An integer, the width of the rendered image.
          update_interval: (optional) An integer, number of simulation steps between
            successive updates to the value of this observable.
          buffer_size: (optional) The maximum size of the returned buffer.
            This option is only relevant when used in conjunction with an
            `observation.Updater`. If None, `observation.DEFAULT_BUFFER_SIZE` will
            be used.
          delay: (optional) Number of additional simulation steps that must be
            taken before an observation is returned. This option is only relevant
            when used in conjunction with an`observation.Updater`. If None,
            `observation.DEFAULT_DELAY` will be used.
          aggregator: (optional) Name of an item in `AGGREGATORS` or a callable that
            performs a reduction operation over the first dimension of the buffered
            observation before it is returned. A value of `None` means that no
            aggregation will be performed and the whole buffer will be returned.
          corruptor: (optional) A callable which takes a single observation as
            an argument, modifies it, and returns it. An example use case for this
            is to add random noise to the observation. When used in a
            `BufferedWrapper`, the corruptor is applied to the observation before
            it is added to the buffer. In particular, this means that the aggregator
            operates on corrupted observations.
          depth: (optional) A boolean. If `True`, renders a depth image (1-channel)
            instead of RGB (3-channel).
        """
        ...
    @property
    def height(self):  # -> int:
        ...
    @height.setter
    def height(self, value):  # -> None:
        ...
    @property
    def width(self):  # -> int:
        ...
    @width.setter
    def width(self, value):  # -> None:
        ...
    @property
    def array_spec(self):  # -> Array:
        ...
