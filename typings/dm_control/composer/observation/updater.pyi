"""
This type stub file was generated by pyright.
"""

"""An object that creates and updates buffers for enabled observables."""
DEFAULT_BUFFER_SIZE = ...
DEFAULT_UPDATE_INTERVAL = ...
DEFAULT_DELAY = ...

class _EnabledObservable:
    """Encapsulates an enabled observable, its buffer, and its update schedule."""

    __slots__ = ...
    def __init__(
        self, observable, physics, random_state, strip_singleton_buffer_dim, pad_with_initial_value
    ) -> None: ...

class Updater:
    """Creates and updates buffers for enabled observables."""

    def __init__(
        self,
        observables,
        physics_steps_per_control_step=...,
        strip_singleton_buffer_dim=...,
        pad_with_initial_value=...,
    ) -> None: ...
    def reset(self, physics, random_state):  # -> None:
        """Resets this updater's state."""
        ...
    def observation_spec(self):  # -> Any:
        """The observation specification for this environment.

        Returns a dict mapping the names of enabled observations to their
        corresponding `Array` or `BoundedArray` specs.

        If an obs has a BoundedArray spec, but uses an aggregator that
        does not preserve those bounds (such as `sum`), it will be mapped to an
        (unbounded) `Array` spec. If using a bounds-preserving custom aggregator
        `my_agg`, give it an attribute `my_agg.preserves_bounds = True` to indicate
        to this method that it is bounds-preserving.

        The returned specification is only valid as of the previous call
        to `reset`. In particular, it is an error to call this function before
        the first call to `reset`.

        Returns:
          A dict mapping observation name to `Array` or `BoundedArray` spec
          containing the observation shape and dtype, and possibly bounds.

        Raises:
          RuntimeError: If this method is called before `reset` has been called.
        """
        ...
    def prepare_for_next_control_step(self):  # -> None:
        """Simulates the next control step and optimizes the update schedule."""
        ...
    def update(self):  # -> None:
        ...
    def get_observation(self):  # -> Any:
        """Gets the current observation.

        The returned observation is only valid as of the previous call
        to `reset`. In particular, it is an error to call this function before
        the first call to `reset`.

        Returns:
          A dict, or list of dicts, or tuple of dicts, of observation values.
          The returned structure corresponds to the structure of the `observables`
          that was given at initialization time.

        Raises:
          RuntimeError: If this method is called before `reset` has been called.
        """
        ...
