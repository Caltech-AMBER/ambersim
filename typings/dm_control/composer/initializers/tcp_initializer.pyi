"""
This type stub file was generated by pyright.
"""

from dm_control import composer

"""An initializer that sets the pose of a hand's tool center point."""
_REJECTION_SAMPLING_FAILED = ...

class ToolCenterPointInitializer(composer.Initializer):
    """An initializer that sets the position of a hand's tool center point.

    This initializer calls the RobotArm's internal method to try and set the
    hand's TCP to a randomized Cartesian position within the specified bound.
    By default the initializer performs rejection sampling in order to avoid
    poses that result in "relevant collisions", which are defined as:

    * Collisions between links of the robot arm
    * Collisions between the arm and the hand
    * Collisions between either the arm or hand and an external body without a
      free joint
    """

    def __init__(
        self, hand, arm, position, quaternion=..., ignore_collisions=..., max_ik_attempts=..., max_rejection_samples=...
    ) -> None:
        """Initializes this ToolCenterPointInitializer.

        Args:
          hand: Either a `base.RobotHand` instance or None, in which case
            `arm.wrist_site` is used as the TCP site in place of
            `hand.tool_center_point`.
          arm: A `base.RobotArm` instance.
          position: A single fixed Cartesian position, or a `Variation`
            object that generates Cartesian positions. If a fixed sequence of
            positions for multiple props is desired, use
            `variation.deterministic.Sequence`.
          quaternion: (optional) A single fixed unit quaternion, or a
            `composer.Variation` object that generates unit quaternions. If a fixed
            sequence of quaternions for ultiple props is desired, use
            `variation.deterministic.Sequence`.
          ignore_collisions: (optional) If True all collisions are ignored, i.e.
            rejection sampling is disabled.
          max_ik_attempts: (optional) Maximum number of attempts for the inverse
            kinematics solver to find a solution satisfying `target_pos` and
            `target_quat`. These are attempts per rejection sample. If more than
            one attempt is performed, the joint configuration will be randomized
            before the second trial. To avoid randomizing joint positions, set this
            parameter to 1.
          max_rejection_samples (optional): Maximum number of TCP target poses to
            sample while attempting to find a non-colliding configuration. For each
            sampled pose, up to `max_ik_attempts` may be performed in order to find
            an IK solution satisfying this pose.
        """
        ...
    def __call__(self, physics, random_state):  # -> None:
        """Sets initial tool center point pose via inverse kinematics.

        Args:
          physics: An `mjcf.Physics` instance.
          random_state: An `np.random.RandomState` instance.

        Raises:
          RuntimeError: If a collision-free pose could not be found within
            `max_ik_attempts`.
        """
        ...
