"""
This type stub file was generated by pyright.
"""

from dm_control import composer

"""An initializer that places props at various poses."""
_SETTLE_QVEL_TOL = ...
_SETTLE_QACC_TOL = ...
_REJECTION_SAMPLING_FAILED = ...
_SETTLING_PHYSICS_FAILED = ...

class PropPlacer(composer.Initializer):
    """An initializer that places props at various positions and orientations."""

    def __init__(
        self,
        props,
        position,
        quaternion=...,
        ignore_collisions=...,
        max_qvel_tol=...,
        max_qacc_tol=...,
        max_attempts_per_prop=...,
        settle_physics=...,
        min_settle_physics_time=...,
        max_settle_physics_time=...,
        max_settle_physics_attempts=...,
        raise_exception_on_settle_failure=...,
    ) -> None:
        """Initializes this PropPlacer.

        Args:
          props: A sequence of `composer.Entity` instances representing props.
          position: A single fixed Cartesian position, or a `composer.Variation`
            object that generates Cartesian positions. If a fixed sequence of
            positions for multiple props is desired, use
            `variation.deterministic.Sequence`.
          quaternion: (optional) A single fixed unit quaternion, or a
            `Variation` object that generates unit quaternions. If a fixed
            sequence of quaternions for multiple props is desired, use
            `variation.deterministic.Sequence`.
          ignore_collisions: (optional) If True, ignore collisions between props,
            i.e. do not run rejection sampling.
          max_qvel_tol: Maximum post-initialization joint velocity for props. If
            `settle_physics=True`, the simulation will be run until all prop joint
            velocities are less than this threshold.
          max_qacc_tol: Maximum post-initialization joint acceleration for props. If
            `settle_physics=True`, the simulation will be run until all prop joint
            velocities are less than this threshold.
          max_attempts_per_prop: The maximum number of rejection sampling attempts
            per prop. If a non-colliding pose cannot be found before this limit is
            reached, a `RuntimeError` will be raised.
          settle_physics: (optional) If True, the physics simulation will be
            advanced for a few steps to allow the prop positions to settle.
          min_settle_physics_time: (optional) When `settle_physics` is True, lower
            bound on time (in seconds) the physics simulation is advanced.
          max_settle_physics_time: (optional) When `settle_physics` is True, upper
            bound on time (in seconds) the physics simulation is advanced.
          max_settle_physics_attempts: (optional) When `settle_physics` is True, the
            number of attempts at sampling overall scene pose and settling.
          raise_exception_on_settle_failure: If True, raises an exception if
            settling physics is unsuccessful.
        """
        ...
    def __call__(self, physics, random_state, ignore_contacts_with_entities=...):  # -> None:
        """Sets initial prop poses.

        Args:
          physics: An `mjcf.Physics` instance.
          random_state: a `np.random.RandomState` instance.
          ignore_contacts_with_entities: a list of `composer.Entity` instances
            to ignore when detecting collisions. This can be used to ignore props
            that are not being placed by this initializer, but are known to be
            colliding in the current state of the simulation (for example if they
            are going to be placed by a different initializer that will be called
            subsequently).

        Raises:
          RuntimeError: If `ignore_collisions == False` and a non-colliding prop
            pose could not be found within `max_attempts_per_prop`.
        """
        ...
