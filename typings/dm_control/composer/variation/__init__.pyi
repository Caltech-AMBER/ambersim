"""
This type stub file was generated by pyright.
"""

import collections
import copy

from dm_control.composer.variation.base import Variation
from dm_control.composer.variation.variation_values import evaluate

"""A module that helps manage model variation in Composer environments."""

class _VariationInfo:
    __slots__ = ...
    def __init__(self, initial_value=..., variation=...) -> None: ...

class MJCFVariator:
    """Helper object for applying variations to MJCF attributes.

    An instance of this class remembers the original value of each MJCF attribute
    the first time a variation is applied. The original value is then passed as an
    argument to each variation callable.
    """

    def __init__(self) -> None: ...
    def bind_attributes(self, element, **kwargs):  # -> None:
        """Binds variations to attributes of an MJCF element.

        Args:
          element: An `mjcf.Element` object.
          **kwargs: Keyword arguments mapping attribute names to the corresponding
            variations. A variation is either a fixed value or a callable that
            optionally takes the original value of an attribute and returns a
            new value.
        """
        ...
    def apply_variations(self, random_state):  # -> None:
        """Applies variations in-place to the specified MJCF element.

        Args:
          random_state: A `numpy.random.RandomState` instance.
        """
        ...
    def clear(self):  # -> None:
        """Clears all bound attribute variations."""
        ...
    def reset_initial_values(self):  # -> None:
        ...

class PhysicsVariator:
    """Helper object for applying variations to MjModel and MjData.

    An instance of this class remembers the original value of each attribute
    the first time a variation is applied. The original value is then passed as an
    argument to each variation callable.
    """

    def __init__(self) -> None: ...
    def bind_attributes(self, element, **kwargs):  # -> None:
        """Binds variations to attributes of an MJCF element.

        Args:
          element: An `mjcf.Element` object.
          **kwargs: Keyword arguments mapping attribute names to the corresponding
            variations. A variation is either a fixed value or a callable that
            optionally takes the original value of an attribute and returns a
            new value.
        """
        ...
    def apply_variations(self, physics, random_state):  # -> None:
        ...
    def clear(self):  # -> None:
        """Clears all bound attribute variations."""
        ...
    def reset_initial_values(self):  # -> None:
        ...
