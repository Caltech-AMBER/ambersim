"""
This type stub file was generated by pyright.
"""

import numpy as np
from dm_control.composer.variation import base

"""Variations in 3D rotations."""
IDENTITY_QUATERNION = np.array([1, 0, 0, 0])

class UniformQuaternion(base.Variation):
    """Uniformly distributed unit quaternions."""

    def __call__(self, initial_value=..., current_value=..., random_state=...):  # -> NDArray[Any]:
        ...

class QuaternionFromAxisAngle(base.Variation):
    """Quaternion variation specified in terms of variations in axis and angle."""

    def __init__(self, axis, angle) -> None: ...
    def __call__(self, initial_value=..., current_value=..., random_state=...):  # -> NDArray[Unknown]:
        ...

class QuaternionPreMultiply(base.Variation):
    """A variation that pre-multiplies an existing quaternion value.

    This variation takes a quaternion value generated by another variation and
    pre-multiplies it to an existing value. In cumulative mode, the new quaternion
    is pre-multiplied to the current value being varied. In non-cumulative mode,
    the new quaternion is pre-multiplied to a fixed initial value.
    """

    def __init__(self, quat, cumulative=...) -> None: ...
    def __call__(self, initial_value=..., current_value=..., random_state=...):  # -> NDArray[Unknown]:
        ...
