"""
This type stub file was generated by pyright.
"""

import abc

"""Base class for variations and binary operations on variations."""

class Variation(metaclass=abc.ABCMeta):
    """Abstract base class for variations."""

    @abc.abstractmethod
    def __call__(self, initial_value, current_value, random_state):  # -> None:
        """Generates a value for this variation.

        Args:
          initial_value: The original value of the attribute being varied.
            Absolute variations may ignore this argument.
          current_value: The current value of the attribute being varied.
            Absolute variations may ignore this argument.
          random_state: A `numpy.RandomState` used to generate the value.
            Deterministic variations may ignore this argument.

        Returns:
          The next value for this variation.
        """
        ...
    def __add__(self, other):  # -> _BinaryOperation:
        ...
    def __radd__(self, other):  # -> _BinaryOperation:
        ...
    def __sub__(self, other):  # -> _BinaryOperation:
        ...
    def __rsub__(self, other):  # -> _BinaryOperation:
        ...
    def __mul__(self, other):  # -> _BinaryOperation:
        ...
    def __rmul__(self, other):  # -> _BinaryOperation:
        ...
    def __truediv__(self, other):  # -> _BinaryOperation:
        ...
    def __rtruediv__(self, other):  # -> _BinaryOperation:
        ...
    def __floordiv__(self, other):  # -> _BinaryOperation:
        ...
    def __rfloordiv__(self, other):  # -> _BinaryOperation:
        ...
    def __pow__(self, other):  # -> _BinaryOperation:
        ...
    def __rpow__(self, other):  # -> _BinaryOperation:
        ...
    def __getitem__(self, index):  # -> _GetItemOperation:
        ...
    def __neg__(self):  # -> _UnaryOperation:
        ...

class _UnaryOperation(Variation):
    """Represents the result of applying a unary operator to a Variation."""

    def __init__(self, op, variation) -> None: ...
    def __call__(self, initial_value=..., current_value=..., random_state=...): ...

class _BinaryOperation(Variation):
    """Represents the result of applying a binary operator to two Variations."""

    def __init__(self, op, first, second) -> None: ...
    def __call__(self, initial_value=..., current_value=..., random_state=...): ...

class _GetItemOperation(Variation):
    def __init__(self, variation, index) -> None: ...
    def __call__(self, initial_value=..., current_value=..., random_state=...):  # -> ndarray[Any, dtype[Any]]:
        ...
