"""
This type stub file was generated by pyright.
"""

import abc

from dm_control.composer.variation import base

"""Standard statistical distributions that conform to the Variation API."""

class Distribution(base.Variation, metaclass=abc.ABCMeta):
    """Base Distribution class for sampling a parametrized distribution.

    Subclasses need to implement `_callable`, which needs to return a callable
    based on the random_state passed as arg. This callable then gets called using
    the arguments passed to the constructor, after being evaluated. This allows
    the distribution parameters themselves to be instances of `base.Variation`.
    By default samples are drawn in the shape of `initial_value`, unless the
    optional `single_sample` constructor arg is set to `True`, in which case only
    a single sample is drawn.
    """

    __slots__ = ...
    def __init__(self, *args, **kwargs) -> None: ...
    def __call__(self, initial_value=..., current_value=..., random_state=...): ...
    def __getattr__(self, name): ...

class Uniform(Distribution):
    __slots__ = ...
    def __init__(self, low=..., high=..., single_sample=...) -> None: ...

class UniformInteger(Distribution):
    __slots__ = ...
    def __init__(self, low, high=..., single_sample=...) -> None: ...

class UniformChoice(Distribution):
    __slots__ = ...
    def __init__(self, choices, single_sample=...) -> None: ...

class UniformPointOnSphere(base.Variation):
    """Samples a point on the unit sphere, i.e. a 3D vector with norm 1."""

    __slots__ = ...
    def __init__(self, single_sample=...) -> None: ...
    def __call__(self, initial_value=..., current_value=..., random_state=...):  # -> Any:
        ...

class Normal(Distribution):
    __slots__ = ...
    def __init__(self, loc=..., scale=..., single_sample=...) -> None: ...

class LogNormal(Distribution):
    __slots__ = ...
    def __init__(self, mean=..., sigma=..., single_sample=...) -> None: ...

class Exponential(Distribution):
    __slots__ = ...
    def __init__(self, scale=..., single_sample=...) -> None: ...

class Poisson(Distribution):
    __slots__ = ...
    def __init__(self, lam=..., single_sample=...) -> None: ...

class Bernoulli(Distribution):
    __slots__ = ...
    def __init__(self, prob=..., single_sample=...) -> None: ...

_NEGATIVE_STDEV = ...
_NEGATIVE_TIMESCALE = ...

class BiasedRandomWalk(base.Variation):
    """A Class for generating noise from a zero-mean Ornstein-Uhlenbeck process.

    Let
    `retain = np.exp(-1. / timescale)`
    and
    `scale = stdev * sqrt(1 - (retain * retain))`
    Then the discete-time first-order filtered diffusion process
    `x_next = retain * x + N(0, scale))`
    has standard deviation `stdev` and characteristic timescale `timescale`.
    """

    __slots__ = ...
    def __init__(self, stdev=..., timescale=...) -> None:
        """Initializes a `BiasedRandomWalk`.

        Args:
          stdev: Float. Standard deviation of the output sequence.
          timescale: Integer. Number of timesteps characteristic of the random walk.
            After `timescale` steps the correlation is reduced by exp(-1). Larger or
            equal to 0, where a value of 0 is an uncorrelated normal distribution.

        Raises:
          ValueError: if either `stdev` or `timescale` is negative.
        """
        ...
    def __call__(self, initial_value=..., current_value=..., random_state=...): ...
