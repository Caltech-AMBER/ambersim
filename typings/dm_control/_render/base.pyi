"""
This type stub file was generated by pyright.
"""

import abc
import contextlib

"""Base class for OpenGL context handlers.

`ContextBase` defines a common API that OpenGL rendering contexts should conform
to. In addition, it provides a `make_current` context manager that:

1. Makes this OpenGL context current within the appropriate rendering thread.
2. Yields an object exposing a `call` method that can be used to execute OpenGL
   calls within the rendering thread.

See the docstring for `dm_control.utils.render_executor` for further details
regarding rendering threads.
"""
_CURRENT_CONTEXT_FOR_THREAD = ...
_CURRENT_THREAD_FOR_CONTEXT = ...

class ContextBase(metaclass=abc.ABCMeta):
    """Base class for managing OpenGL contexts."""

    def __init__(self, max_width, max_height, render_executor_class=...) -> None:
        """Initializes this context."""
        ...
    def keep_alive(self, obj):  # -> None:
        ...
    def dont_keep_alive(self, obj):  # -> None:
        ...
    def increment_refcount(self):  # -> None:
        ...
    def decrement_refcount(self):  # -> None:
        ...
    @property
    def terminated(self):  # -> bool:
        ...
    @property
    def thread(self):  # -> Thread | None:
        ...
    def free(self):  # -> None:
        """Frees resources associated with this context if its refcount is zero."""
        ...
    def __del__(self):  # -> None:
        ...
    @contextlib.contextmanager
    def make_current(self):  # -> Generator[PassthroughRenderExecutor, Any, None]:
        """Context manager that makes this Renderer's OpenGL context current.

        Yields:
          An object that exposes a `call` method that can be used to call a
          function on the dedicated rendering thread.

        Raises:
          RuntimeError: If this context is already current on another thread.
        """
        ...
