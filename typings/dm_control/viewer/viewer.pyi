"""
This type stub file was generated by pyright.
"""

from dm_control.mujoco.wrapper import mjbindings

"""Mujoco Physics viewer, with custom input controllers."""
functions = mjbindings.functions
_NUM_GROUP_KEYS = ...
_PAN_CAMERA_VERTICAL_MOUSE = ...
_PAN_CAMERA_HORIZONTAL_MOUSE = ...
_ROTATE_OBJECT_MOUSE = ...
_MOVE_OBJECT_VERTICAL_MOUSE = ...
_MOVE_OBJECT_HORIZONTAL_MOUSE = ...
_PAN_CAMERA_VERTICAL_TOUCHPAD = ...
_PAN_CAMERA_HORIZONTAL_TOUCHPAD = ...
_ROTATE_OBJECT_TOUCHPAD = ...
_MOVE_OBJECT_VERTICAL_TOUCHPAD = ...
_MOVE_OBJECT_HORIZONTAL_TOUCHPAD = ...
_ROTATE_CAMERA = ...
_CENTER_CAMERA = ...
_SELECT_OBJECT = ...
_TRACK_OBJECT = ...
_FREE_LOOK = ...
_NEXT_CAMERA = ...
_PREVIOUS_CAMERA = ...
_ZOOM_TO_SCENE = ...
_DOUBLE_BUFFERING = ...
_PREV_RENDERING_MODE = ...
_NEXT_RENDERING_MODE = ...
_PREV_LABELING_MODE = ...
_NEXT_LABELING_MODE = ...
_PRINT_CAMERA = ...
_VISUALIZATION_FLAGS = ...
_GEOM_GROUPS = ...
_SITE_GROUPS = ...
_RENDERING_FLAGS = ...
_CAMERA_MOVEMENT_ACTIONS = ...
_SCROLL_SPEED_FACTOR = ...
_LOOK_AT_DISTANCE = ...
_FULL_SCENE_ZOOM_FACTOR = ...

class Viewer:
    """Viewport displaying the contents of a physics world."""

    def __init__(self, viewport, mouse, keyboard, camera_settings=..., zoom_factor=..., scene_callback=...) -> None:
        """Instance initializer.

        Args:
          viewport: Render viewport, instance of renderer.Viewport.
          mouse: A mouse device.
          keyboard: A keyboard device.
          camera_settings: Properties of the scene MjvCamera.
          zoom_factor: Initial scale factor for zooming into the scene.
          scene_callback: Scene callback.
            This is a callable of the form: `my_callable(MjModel, MjData, MjvScene)`
            that gets applied to every rendered scene.
        """
        ...
    def __del__(self):  # -> None:
        ...
    def initialize(self, physics, renderer_instance, touchpad):  # -> None:
        """Initialize the viewer.

        Args:
          physics: Physics instance.
          renderer_instance: A renderer.Base instance.
          touchpad: A boolean, use input dedicated to touchpad.
        """
        ...
    def deinitialize(self):  # -> None:
        """Deinitializes the viewer instance."""
        ...
    def render(self):  # -> None:
        """Renders the visualized scene."""
        ...
    def zoom_to_scene(self):  # -> None:
        """Utility method that set the camera to embrace the entire scene."""
        ...
    @property
    def perturbation(self):  # -> NullPerturbation:
        """Returns an active renderer.Perturbation object."""
        ...
    @property
    def camera(self):  # -> SceneCamera | None:
        """Returns an active renderer.SceneCamera instance."""
        ...
    @property
    def render_settings(self):  # -> RenderSettings:
        """Returns renderer.RenderSettings used by this viewer."""
        ...

class CameraSelector:
    """Binds camera behavior to user input."""

    def __init__(self, model, camera, free_camera, **unused) -> None:
        """Instance initializer.

        Args:
          model: Instance of MjModel.
          camera: Instance of SceneCamera.
          free_camera: Instance of FreeCameraController.
          **unused: Other arguments, not used by this class.
        """
        ...
    def select_previous(self):  # -> None:
        """Cycles to the previous scene camera."""
        ...
    def select_next(self):  # -> None:
        """Cycles to the next scene camera."""
        ...
    def escape(self) -> None:
        """Unconditionally switches to the free camera."""
        ...

class FreeCameraController:
    """Implements the free camera behavior."""

    def __init__(self, viewport, camera, pointer, selection_service, **unused) -> None:
        """Instance initializer.

        Args:
          viewport: Instance of mujoco_viewer.Viewport.
          camera: Instance of mujoco_viewer.SceneCamera.
          pointer: A pointer that moves around the screen and is used to point at
            bodies. Implements a single attribute - 'position' - that returns a
            2-component vector of pointer's screen space position.
          selection_service: An instance of a class implementing a
            'selected_body_id' property.
          **unused: Other optional parameters not used by this class.
        """
        ...
    def activate(self):  # -> None:
        """Activates the controller."""
        ...
    def deactivate(self):  # -> None:
        """Deactivates the controller."""
        ...
    def set_pan_vertical_mode(self, enable):  # -> None:
        """Starts/ends the camera panning action along the vertical plane.

        Args:
          enable: A boolean flag, True to start the action, False to end it.
        """
        ...
    def set_pan_horizontal_mode(self, enable):  # -> None:
        """Starts/ends the camera panning action along the horizontal plane.

        Args:
          enable: A boolean flag, True to start the action, False to end it.
        """
        ...
    def set_rotate_mode(self, enable):  # -> None:
        """Starts/ends the camera rotation action.

        Args:
          enable: A boolean flag, True to start the action, False to end it.
        """
        ...
    def center(self):  # -> None:
        """Focuses camera on the object the pointer is currently pointing at."""
        ...
    def on_move(self, position, translation):  # -> None:
        """Translates mouse moves onto camera movements."""
        ...
    def zoom(self, zoom_factor):  # -> None:
        """Zooms the camera in/out.

        Args:
          zoom_factor: A floating point value, by how much to zoom the camera.
            Positive values zoom the camera in, negative values zoom it out.
        """
        ...
    def track(self):  # -> None:
        """Makes the camera track the currently selected object.

        The selection is managed by the selection service.
        """
        ...
    def free_look(self):  # -> None:
        """Switches the camera to a free-look mode."""
        ...

class ManipulationController:
    """Binds control over scene objects to user input."""

    def __init__(self, viewport, camera, pointer, **unused) -> None:
        """Instance initializer.

        Args:
          viewport: Instance of mujoco_viewer.Viewport.
          camera: Instance of mujoco_viewer.SceneCamera.
          pointer: A pointer that moves around the screen and is used to point at
            bodies. Implements a single attribute - 'position' - that returns a
            2-component vector of pointer's screen space position.
          **unused: Other arguments, unused by this class.
        """
        ...
    def select(self):  # -> None:
        """Translates mouse double-clicks to object selection action."""
        ...
    def set_move_vertical_mode(self, enable):  # -> None:
        """Begins/ends an object translation action along the vertical plane.

        Args:
          enable: A boolean flag, True begins the action, False ends it.
        """
        ...
    def set_move_horizontal_mode(self, enable):  # -> None:
        """Begins/ends an object translation action along the horizontal plane.

        Args:
          enable: A boolean flag, True begins the action, False ends it.
        """
        ...
    def set_rotate_mode(self, enable):  # -> None:
        """Begins/ends an object rotation action.

        Args:
          enable: A boolean flag, True begins the action, False ends it.
        """
        ...
    def on_move(self, position, translation):  # -> None:
        """Translates mouse moves to selected object movements."""
        ...
    @property
    def perturbation(self):  # -> None:
        """Returns the Perturbation object that represents the manipulated body."""
        ...
    @property
    def selected_body_id(self):  # -> Literal[-1]:
        """Returns the id of the selected body, or -1 if none is selected."""
        ...
