"""
This type stub file was generated by pyright.
"""

import abc
import enum

from dm_control.viewer import renderer

"""Components and views that render custom images into Mujoco render frame."""

class PanelLocation(enum.Enum):
    TOP_LEFT = ...
    TOP_RIGHT = ...
    BOTTOM_LEFT = ...
    BOTTOM_RIGHT = ...

class BaseViewportView(metaclass=abc.ABCMeta):
    """Base abstract view class."""

    @abc.abstractmethod
    def render(self, context, viewport, location):  # -> None:
        """Renders the view on screen.

        Args:
          context: MjrContext instance.
          viewport: Viewport instance.
          location: Value defined in PanelLocation enum.
        """
        ...

class ColumnTextModel(metaclass=abc.ABCMeta):
    """Data model that returns 2 columns of text."""

    @abc.abstractmethod
    def get_columns(self):  # -> None:
        """Returns the text to display in two columns.

        Returns:
          Returns an iterable of tuples of 2 strings. Each tuple has format
          (left_column_label, right_column_label).
        """
        ...

class ColumnTextView(BaseViewportView):
    """A view displayed in Mujoco render window."""

    def __init__(self, model) -> None:
        """Instance initializer.

        Args:
          model: Instance of ColumnTextModel.
        """
        ...
    def render(self, context, viewport, location):  # -> None:
        """Renders the overlay on screen.

        Args:
          context: MjrContext instance.
          viewport: Viewport instance.
          location: Value defined in PanelLocation enum.
        """
        ...

class MujocoDepthBuffer(renderer.Component):
    """Displays the contents of the scene's depth buffer."""

    def __init__(self) -> None: ...
    def render(self, context, viewport):  # -> None:
        """Renders the overlay on screen.

        Args:
          context: MjrContext instance.
          viewport: MJRRECT instance.
        """
        ...

class ViewportLayout(renderer.Component):
    """Layout manager for the render viewport.

    Allows to create a viewport layout by injecting renderer component even in
    absence of a renderer, and then easily reattach it between renderers.
    """

    def __init__(self) -> None:
        """Instance initializer."""
        ...
    def __len__(self):  # -> int:
        ...
    def __contains__(self, key):  # -> bool:
        ...
    def add(self, view, location):  # -> None:
        """Adds a new view.

        Args:
          view: renderer.BaseViewportView instance.
          location: Value defined in PanelLocation enum, location of the view in the
            viewport.
        """
        ...
    def remove(self, view):  # -> None:
        """Removes a view.

        Args:
          view: renderer.BaseViewportView instance.
        """
        ...
    def clear(self):  # -> None:
        """Removes all attached components."""
        ...
    def render(self, context, viewport):  # -> None:
        """Renders the overlay on screen.

        Args:
          context: MjrContext instance.
          viewport: MJRRECT instance.
        """
        ...
