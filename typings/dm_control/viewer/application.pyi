"""
This type stub file was generated by pyright.
"""

import collections

from dm_control.viewer import views

"""Viewer application module."""
_DOUBLE_BUFFERING = ...
_PAUSE = ...
_RESTART = ...
_ADVANCE_SIMULATION = ...
_SPEED_UP_TIME = ...
_SLOW_DOWN_TIME = ...
_HELP = ...
_STATUS = ...
_MAX_FRONTBUFFER_SIZE = ...
_MISSING_STATUS_ENTRY = ...
_RUNTIME_STOPPED_LABEL = ...
_STATUS_LABEL = ...
_TIME_LABEL = ...
_CPU_LABEL = ...
_FPS_LABEL = ...
_CAMERA_LABEL = ...
_PAUSED_LABEL = ...
_ERROR_LABEL = ...

class Help(views.ColumnTextModel):
    """Contains the description of input map employed in the application."""

    def __init__(self) -> None:
        """Instance initializer."""
        ...
    def get_columns(self):  # -> list[list[str]]:
        """Returns the text to display in two columns."""
        ...

class Status(views.ColumnTextModel):
    """Monitors and returns the status of the application."""

    def __init__(self, time_multiplier, pause, frame_timer) -> None:
        """Instance initializer.

        Args:
          time_multiplier: Instance of util.TimeMultiplier.
          pause: An observable pause subject, instance of util.ObservableFlag.
          frame_timer: A Timer instance counting duration of frames.
        """
        ...
    def set_camera(self, camera):  # -> None:
        """Updates the active camera instance.

        Args:
          camera: Instance of renderer.SceneCamera.
        """
        ...
    def set_runtime(self, instance):  # -> None:
        """Updates the active runtime instance.

        Args:
          instance: Instance of runtime.Base.
        """
        ...
    def get_columns(
        self,
    ):  # -> list[tuple[Literal['Status', 'Time', 'CPU', 'FPS', 'Camera', 'Paused', 'Error'], Literal['--']]]:
        """Returns the text to display in two columns."""
        ...

class ReloadParams(collections.namedtuple("RefreshParams", ["zoom_to_scene"])):
    """Parameters of a reload request."""

    ...

class Application:
    """Viewer application."""

    def __init__(self, title=..., width=..., height=...) -> None:
        """Instance initializer."""
        ...
    def launch(self, environment_loader, policy=...):  # -> None:
        """Starts the viewer with the specified policy and environment.

        Args:
          environment_loader: Either a callable that takes no arguments and returns
            an instance of dm_control.rl.control.Environment, or an instance of
            dm_control.rl.control.Environment.
          policy: An optional callable corresponding to a policy to execute
            within the environment. It should accept a `TimeStep` and return
            a numpy array of actions conforming to the output of
            `environment.action_spec()`. If the callable implements a method `reset`
            then this method is called when the viewer is reset.

        Raises:
          ValueError: If `environment_loader` is None.
        """
        ...
