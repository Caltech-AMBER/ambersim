"""
This type stub file was generated by pyright.
"""

import abc
import contextlib

import mujoco
import numpy as np

"""Renderer module."""
_FREE_CAMERA_INDEX = ...
_NO_BODY_TRACKED_INDEX = ...
_INVALID_BODY_INDEX = ...
_FULL_SCENE_ZOOM_FACTOR = ...
_DEFAULT_RENDER_FLAGS = np.zeros(mujoco.mjtRndFlag.mjNRNDFLAG, dtype=np.ubyte)
_DEFAULT_FONT_SCALE = ...
_HIDPI_FONT_SCALE = ...

class BaseRenderer(metaclass=abc.ABCMeta):
    """A base class for component-based Mujoco Renderers implementations.

    Attributes:
      components: A set of RendererComponent the renderer will render in addition
        to rendering the physics scene. Being a QuietSet instance, it supports
        adding and removing of components using += and -= operators.
      screen_capture_components: Components that perform screen capture and need
        a guarantee to be called when all other elements have been rendered.
    """

    def __init__(self) -> None:
        """Instance initializer."""
        ...

class Component(metaclass=abc.ABCMeta):
    """Components are a way to introduce extra rendering content.

    They are invoked after the main rendering pass, allowing to draw extra images
    into the render buffer, such as overlays.
    """

    @abc.abstractmethod
    def render(self, context, viewport):  # -> None:
        """Renders the component.

        Args:
          context: MjrContext instance.
          viewport: Viewport instance.
        """
        ...

class NullRenderer:
    """A stub off-screen renderer used when no other renderer is available."""

    def __init__(self) -> None:
        """Instance initializer."""
        ...
    def release(self):  # -> None:
        ...
    @property
    def pixels(self):  # -> NDArray[uint8]:
        """Returns a black pixel map."""
        ...

class OffScreenRenderer(BaseRenderer):
    """A Mujoco renderer that renders to an off-screen surface."""

    def __init__(self, model, surface) -> None:
        """Instance initializer.

        Args:
          model: instance of MjModel.
          surface: instance of dm_control.render.BaseContext.
        """
        ...
    def render(self, viewport, scene):  # -> None:
        """Renders the scene to the specified viewport.

        Args:
          viewport: Instance of Viewport.
          scene: Instance of MjvScene.
        Returns:
          A 3-dimensional array of shape (viewport.width, viewport.height, 3),
          with the contents of the front buffer.
        """
        ...
    def release(self):  # -> None:
        """Releases the render context and related resources."""
        ...
    @property
    def pixels(self):  # -> NDArray[uint8]:
        """Returns the rendered image."""
        ...

class Perturbation:
    """A proxy that allows to move a scene object."""

    def __init__(self, body_id, model, data, scene) -> None:
        """Instance initializer.

        Args:
          body_id: A positive integer, ID of the body to manipulate.
          model: MjModel instance.
          data: MjData instance.
          scene: MjvScene instance.
        """
        ...
    def start_move(self, action, grab_pos):  # -> None:
        """Starts a movement action."""
        ...
    def tick_move(self, viewport_offset):  # -> None:
        """Transforms object's location/rotation by the specified amount."""
        ...
    def end_move(self):  # -> None:
        """Ends a movement operation."""
        ...
    @contextlib.contextmanager
    def apply(self, paused):  # -> Generator[None, Any, None]:
        """Applies the modifications introduced by performing the move operation."""
        ...
    @property
    def ptr(self):  # -> MjvPerturb:
        """Returns the underlying Mujoco Perturbation object."""
        ...
    @property
    def body_id(self):  # -> Unknown:
        """A positive integer, ID of the manipulated body."""
        ...

class NullPerturbation:
    """An empty perturbation.

    A null-object pattern, used to avoid cumbersome if clauses.
    """

    @contextlib.contextmanager
    def apply(self, paused):  # -> Generator[None, Any, None]:
        """Activates/deactivates the null context."""
        ...
    @property
    def ptr(self):  # -> None:
        """Returns None, because this class represents an empty perturbation."""
        ...

class RenderSettings:
    """Renderer settings."""

    def __init__(self) -> None: ...
    @property
    def visualization(self):  # -> MjvOption:
        """Returns scene visualization options."""
        ...
    @property
    def render_flags(self):  # -> NDArray[ubyte]:
        """Returns the render flags."""
        ...
    @property
    def visualization_flags(self):
        """Returns scene visualization flags."""
        ...
    @property
    def geom_groups(self):
        """Returns geom groups visibility flags."""
        ...
    @property
    def site_groups(self):
        """Returns site groups visibility flags."""
        ...
    def apply_settings(self, scene):  # -> None:
        """Applies settings to the specified scene.

        Args:
          scene: Instance of MjvScene.
        """
        ...
    def toggle_rendering_flag(self, flag_index):  # -> None:
        """Toggles the specified rendering flag."""
        ...
    def toggle_visualization_flag(self, flag_index):  # -> None:
        """Toggles the specified visualization flag."""
        ...
    def toggle_geom_group(self, group_index):  # -> None:
        """Toggles the specified geom group visible or not."""
        ...
    def toggle_site_group(self, group_index):  # -> None:
        """Toggles the specified site group visible or not."""
        ...
    def toggle_stereo_buffering(self):  # -> None:
        """Toggles the double buffering mode on/off."""
        ...
    def select_next_rendering_mode(self):  # -> None:
        """Cycles to the next rendering mode."""
        ...
    def select_prev_rendering_mode(self):  # -> None:
        """Cycles to the previous rendering mode."""
        ...
    def select_next_labeling_mode(self):  # -> None:
        """Cycles to the next scene object labeling mode."""
        ...
    def select_prev_labeling_mode(self):  # -> None:
        """Cycles to the previous scene object labeling mode."""
        ...

class SceneCamera:
    """A camera used to navigate around and render the scene."""

    def __init__(self, model, data, options, settings=..., zoom_factor=..., scene_callback=...) -> None:
        """Instance initializer.

        Args:
          model: MjModel instance.
          data: MjData instance.
          options: RenderSettings instance.
          settings: Optional, internal camera settings obtained from another
            SceneCamera instance using 'settings' property.
          zoom_factor: The initial zoom factor for zooming into the scene.
          scene_callback: Scene callback.
            This is a callable of the form: `my_callable(MjModel, MjData, MjvScene)`
            that gets applied to every rendered scene.
        """
        ...
    def set_freelook_mode(self):  # -> None:
        """Enables 6 degrees of freedom of movement for the camera."""
        ...
    def set_tracking_mode(self, body_id):  # -> None:
        """Latches the camera onto the specified body.

        Leaves the user only 3 degrees of freedom to rotate the camera.

        Args:
          body_id: A positive integer, ID of the body to track.
        """
        ...
    def set_fixed_mode(self, fixed_camera_id):  # -> None:
        """Fixes the camera in a pre-defined position, taking away all DOF.

        Args:
          fixed_camera_id: A positive integer, Id of a fixed camera defined in the
            scene.
        """
        ...
    def look_at(self, position, distance):  # -> None:
        """Positions the camera so that it's focused on the specified point."""
        ...
    def move(self, action, viewport_offset):  # -> None:
        """Moves the camera around the scene."""
        ...
    def new_perturbation(self, body_id):  # -> Perturbation:
        """Creates a proxy that allows to manipulate the specified object."""
        ...
    def raycast(
        self, viewport, screen_pos
    ):  # -> tuple[Literal[-1], None] | tuple[Unknown | Literal[-1], NDArray[double] | None]:
        """Shoots a ray from the specified viewport position into the scene."""
        ...
    def render(self, perturbation=...):  # -> MjvScene:
        """Renders the scene form this camera's perspective.

        Args:
          perturbation: (Optional), instance of Perturbation.
        Returns:
          Rendered scene, instance of MjvScene.
        """
        ...
    def zoom_to_scene(self):  # -> None:
        """Zooms in on the entire scene."""
        ...
    @property
    def transform(self):  # -> tuple[NDArray[float64], NDArray[float64]]:
        """Returns a tuple with camera transform.

        The transform comes in form: (3x3 rotation mtx, 3-component position).
        """
        ...
    @property
    def settings(self):  # -> MjvCamera:
        """Returns internal camera settings."""
        ...
    @settings.setter
    def settings(self, value):  # -> None:
        """Restores the camera settings."""
        ...
    @property
    def name(self):  # -> str:
        """Name of the active camera."""
        ...
    @property
    def mode(self):
        """Index of the mode the camera is currently in."""
        ...
    @property
    def is_initialized(self):  # -> Literal[False]:
        """Returns True if camera is properly initialized."""
        ...

class Viewport:
    """Render viewport."""

    def __init__(self, width=..., height=...) -> None:
        """Instance initializer.

        Args:
          width: Viewport width, in pixels.
          height: Viewport height, in pixels.
        """
        ...
    def set_size(self, width, height):  # -> None:
        """Changes the viewport size.

        Args:
          width: Viewport width, in pixels.
          height: Viewport height, in pixels.
        """
        ...
    def screen_to_viewport(self, screen_coordinates):  # -> NDArray[float32]:
        """Converts screen coordinates to viewport coordinates.

        Args:
          screen_coordinates: 2-component tuple, with components being integral
            numbers in range defined by the screen/window resolution.
        Returns:
          A 2-component tuple, with components being floating point values in range
          [0, 1].
        """
        ...
    def screen_to_inverse_viewport(self, screen_coordinates):  # -> NDArray[float32]:
        """Converts screen coordinates to viewport coordinates flipped vertically.

        Args:
          screen_coordinates: 2-component tuple, with components being integral
            numbers in range defined by the screen/window resolution.
        Returns:
          A 2-component tuple, with components being floating point values in range
          [0, 1]. The height component value will be flipped, with 1 at the top, and
          0 at the bottom of the viewport.
        """
        ...
    @property
    def aspect_ratio(self): ...
    @property
    def mujoco_rect(self):
        """Instance of MJRRECT with viewport dimensions."""
        ...
    @property
    def dimensions(self):  # -> NDArray[Unknown]:
        """Viewport dimensions in form of a 2-component vector."""
        ...
    @property
    def width(self):
        """Viewport width."""
        ...
    @property
    def height(self):
        """Viewport height."""
        ...
