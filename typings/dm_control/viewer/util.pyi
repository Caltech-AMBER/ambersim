"""
This type stub file was generated by pyright.
"""

import contextlib

"""Utility classes."""
_MIN_TIME_MULTIPLIER = ...
_MAX_TIME_MULTIPLIER = ...

def is_scalar(value):  # -> bool:
    """Checks if the supplied value can be converted to a scalar."""
    ...

def to_iterable(item):  # -> list[str] | list[Unknown]:
    """Converts an item or iterable into an iterable."""
    ...

class QuietSet:
    """A set-like container that quietly processes removals of missing keys."""

    def __init__(self) -> None: ...
    def __iadd__(self, items):  # -> Self@QuietSet:
        """Adds `items`, avoiding duplicates.

        Args:
          items: An iterable of items to add, or a single item to add.

        Returns:
          This instance of `QuietSet`.
        """
        ...
    def __isub__(self, items):  # -> Self@QuietSet:
        """Detaches `items`.

        Args:
          items: An iterable of items to detach, or a single item to detach.

        Returns:
          This instance of `QuietSet`.
        """
        ...
    def __len__(self):  # -> int:
        ...
    def __iter__(self):  # -> Iterator[Unknown]:
        ...

def interleave(a, b):  # -> chain[Unknown]:
    """Interleaves the contents of two iterables."""
    ...

class TimeMultiplier:
    """Controls the relative speed of the simulation compared to realtime."""

    def __init__(self, initial_time_multiplier) -> None:
        """Instance initializer.

        Args:
          initial_time_multiplier: A float scalar specifying the initial speed of
            the simulation with 1.0 corresponding to realtime.
        """
        ...
    def get(self):  # -> float:
        """Returns the current time factor value."""
        ...
    def set(self, value):  # -> None:
        """Modifies the time factor.

        Args:
          value: A float scalar, new value of the time factor.
        """
        ...
    def __str__(self) -> str:
        """Returns a formatted string containing the time factor."""
        ...
    def increase(self):  # -> None:
        """Doubles the current time factor value."""
        ...
    def decrease(self):  # -> None:
        """Halves the current time factor value."""
        ...

class Integrator:
    """Integrates a value and averages it for the specified period of time."""

    def __init__(self, refresh_rate=...) -> None:
        """Instance initializer.

        Args:
          refresh_rate: How often, in seconds, is the integrated value averaged.
        """
        ...
    @property
    def value(self):  # -> int:
        """Returns the averaged value."""
        ...
    @value.setter
    def value(self, val):  # -> None:
        """Integrates the new value."""
        ...

class AtomicAction:
    """An action that cannot be interrupted."""

    def __init__(self, state_change_callback=...) -> None:
        """Instance initializer.

        Args:
          state_change_callback: Callable invoked when action changes its state.
        """
        ...
    def begin(self, watermark):  # -> None:
        """Begins the action, signing it with the specified watermark."""
        ...
    def end(self, watermark):  # -> None:
        """Ends a started action, provided the watermarks match."""
        ...
    @property
    def in_progress(self):  # -> bool:
        """Returns a boolean value to indicate if the being method was called."""
        ...
    @property
    def watermark(self):  # -> None:
        """Returns the watermark passed to begin() method call, or None.

        None will be returned if the action is not in progress.
        """
        ...

class ObservableFlag(QuietSet):
    """Observable boolean flag.

    The QuietState provides necessary functionality for managing listeners.

    A listener is a callable that takes one boolean parameter.
    """

    def __init__(self, initial_value) -> None:
        """Instance initializer.

        Args:
          initial_value: A boolean value with the initial state of the flag.
        """
        ...
    def toggle(self):  # -> None:
        """Toggles the value True/False."""
        ...
    def __iadd__(self, value):  # -> Self@ObservableFlag:
        """Add new listeners and update them about the state."""
        ...
    @property
    def value(self):  # -> Unknown | bool:
        """Value of the flag."""
        ...
    @value.setter
    def value(self, val):  # -> None:
        ...

class Timer:
    """Measures time elapsed between two ticks."""

    def __init__(self) -> None:
        """Instance initializer."""
        ...
    def tick(self):  # -> float:
        """Updates the timer.

        Returns:
          Time elapsed since the last call to this method.
        """
        ...
    @contextlib.contextmanager
    def measure_time(self):  # -> Generator[None, Any, None]:
        ...
    @property
    def measured_time(self):  # -> float:
        ...

class ErrorLogger:
    """A context manager that catches and logs all errors."""

    def __init__(self, listeners) -> None:
        """Instance initializer.

        Args:
          listeners: An iterable of callables, listeners to inform when an error
            is caught. Each callable should accept a single string argument.
        """
        ...
    def __enter__(self, *args):  # -> None:
        ...
    def __exit__(self, exception_type, exception_value, tb):  # -> Literal[True] | None:
        ...
    @property
    def errors_found(self):  # -> bool:
        """Returns True if any errors were caught."""
        ...

class NullErrorLogger:
    """A context manager that replaces an ErrorLogger.

    This error logger will pass all thrown errors through.
    """

    def __enter__(self, *args):  # -> None:
        ...
    def __exit__(self, error_type, value, tb):  # -> None:
        ...
    @property
    def errors_found(self):  # -> Literal[False]:
        """Returns True if any errors were caught."""
        ...
