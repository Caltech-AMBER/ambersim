"""
This type stub file was generated by pyright.
"""

import enum

from dm_control.mujoco.wrapper import mjbindings

"""Environment's execution runtime."""
mjlib = mjbindings.mjlib
_SIMULATION_STEP_INTERVAL = ...
_DEFAULT_MAX_SIM_STEP = ...

class State(enum.Enum):
    """State of the Runtime class."""

    START = ...
    RUNNING = ...
    STOP = ...
    STOPPED = ...
    RESTARTING = ...

class Runtime:
    """Base Runtime class.

    Attributes:
      simulation_time_budget: Float value, how much time can be spent on physics
        simulation every frame, in seconds.
      on_episode_begin: An observable subject, an instance of util.QuietSet.
        It contains argumentless callables, invoked, when a new episode begins.
      on_error: An observable subject, an instance of util.QuietSet. It contains
        single argument callables, invoked, when the environment or the agent
        throw an error.
      on_physics_changed: An observable subject, an instance of util.QuietSet.
        During episode restarts, the underlying physics instance may change. If
        you are interested in learning about those changes, attach a listener
        using the += operator. The listener should be a callable with no required
        arguments.
    """

    def __init__(self, environment, policy=...) -> None:
        """Instance initializer.

        Args:
          environment: An instance of dm_control.rl.control.Environment.
          policy: Either a callable that accepts a `TimeStep` and returns a numpy
            array of actions conforming to `environment.action_spec()`, or None, in
            which case a default action will be generated for each environment step.
        """
        ...
    def tick(self, time_elapsed, paused):  # -> None:
        """Advances the simulation by one frame.

        Args:
          time_elapsed: Time elapsed since the last time this method was called.
          paused: A boolean flag telling if the  simulation is paused.
        Returns:
          A boolean flag to determine if the episode has finished.
        """
        ...
    def single_step(self):  # -> None:
        """Performs a single step of simulation."""
        ...
    def stop(self):  # -> None:
        """Stops the runtime."""
        ...
    def restart(self):  # -> None:
        """Restarts the episode, resetting environment, model, and data."""
        ...
    def get_time(self):
        """Elapsed simulation time."""
        ...
    @property
    def state(self):  # -> State:
        """Returns the current state of the state machine.

        Returned states are values of runtime.State enum.
        """
        ...
    @property
    def simulation_time(self):  # -> float:
        """Returns the amount of time spent running the simulation."""
        ...
    @property
    def last_action(self):  # -> tuple[Unknown, ...] | NDArray[Unknown] | None:
        """Action passed to the environment on the last step."""
        ...
