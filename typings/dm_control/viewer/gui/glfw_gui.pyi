"""
This type stub file was generated by pyright.
"""

from dm_control._render import glfw_renderer
from dm_control.viewer.gui import base

"""Windowing system that uses GLFW library."""

class DoubleBufferedGlfwContext(glfw_renderer.GLFWContext):
    """Custom context manager for the GLFW based GUI."""

    def __init__(self, width, height, title) -> None: ...
    @property
    def window(self):  # -> Any:
        ...

class GlfwKeyboard(base.InputEventsProcessor):
    """Glfw keyboard device handler.

    Handles the keyboard input in a thread-safe way, and forwards the events
    to the registered callbacks.

    Attributes:
      on_key: Observable subject triggered when a key event is triggered.
        Expects a callback with signature: (key, scancode, activity, modifiers)
    """

    def __init__(self, context) -> None: ...

class GlfwMouse(base.InputEventsProcessor):
    """Glfw mouse device handler.

    Handles the mouse input in a thread-safe way, forwarding the events to the
    registered callbacks.

    Attributes:
      on_move: Observable subject triggered when a mouse move is detected.
        Expects a callback with signature (position, translation).
      on_click: Observable subject triggered when a mouse click is detected.
        Expects a callback with signature (button, action, modifiers).
      on_double_click: Observable subject triggered when a mouse double click is
        detected. Expects a callback with signature (button, modifiers).
      on_scroll: Observable subject triggered when a mouse scroll is detected.
        Expects a callback with signature (scroll_value).
    """

    def __init__(self, context) -> None: ...
    @property
    def position(self):  # -> NDArray[Any]:
        ...

class GlfwWindow:
    """A GLFW based application window.

    Attributes:
      on_files_drop: An observable subject, instance of util.QuietSet. Attached
        listeners, callables taking one argument, will be invoked every time the
        user drops files onto the window. The callable will be passed an iterable
        with dropped file paths.
      is_full_screen: Boolean, whether the window is currently full-screen.
    """

    def __init__(self, width, height, title, context=...) -> None:
        """Instance initializer.

        Args:
          width: Initial window width, in pixels.
          height: Initial window height, in pixels.
          title: A string with a window title.
          context: (Optional) A `render.GLFWContext` instance.

        Raises:
          RuntimeError: If GLFW initialization or window initialization fails.
        """
        ...
    @property
    def shape(self):  # -> tuple[int, int]:
        """Returns a tuple with the shape of the window, (width, height)."""
        ...
    @property
    def position(self):  # -> tuple[int, int]:
        """Returns a tuple with top-left window corner's coordinates, (x, y)."""
        ...
    @property
    def keyboard(self):  # -> GlfwKeyboard:
        """Returns a GlfwKeyboard instance associated with the window."""
        ...
    @property
    def mouse(self):  # -> GlfwMouse:
        """Returns a GlfwMouse instance associated with the window."""
        ...
    def set_title(self, title):  # -> None:
        """Sets the window title.

        Args:
          title: A string, title of the window.
        """
        ...
    def set_full_screen(self, enable):  # -> None:
        """Expands the main application window to full screen or minimizes it.

        Args:
          enable: Boolean flag, True expands the window to full-screen mode, False
            minimizes it to its former size.
        """
        ...
    def toggle_full_screen(self):  # -> None:
        """Expands the main application window to full screen or minimizes it."""
        ...
    @property
    def is_full_screen(self):  # -> bool:
        ...
    def free(self):  # -> None:
        """Closes the deleted window."""
        ...
    def event_loop(self, tick_func):  # -> None:
        """Runs the window's event loop.

        This is a blocking call that won't exit until the window is closed.

        Args:
          tick_func: A callable, function to call every frame.
        """
        ...
    def update(self, render_func):  # -> None:
        """Updates the window and renders a new image.

        Args:
          render_func: A callable returning a 3D numpy array of bytes (np.uint8),
            with dimensions (width, height, 3).
        """
        ...
    def close(self):  # -> None:
        """Closes the window and releases associated resources."""
        ...
    def __del__(self):  # -> None:
        ...
