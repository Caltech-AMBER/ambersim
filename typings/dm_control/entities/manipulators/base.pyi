"""
This type stub file was generated by pyright.
"""

import abc

import numpy as np
from dm_control import composer
from dm_control.composer import define
from dm_control.composer.observation import observable

"""Abstract base classes for robot arms and hands."""
DOWN_QUATERNION = np.array([0, 0.70710678118, 0.70710678118, 0])
_INVALID_JOINTS_ERROR = ...

class RobotArm(composer.Robot, metaclass=abc.ABCMeta):
    """The abstract base class for robotic arms."""

    @property
    def attachment_site(self): ...
    def randomize_arm_joints(self, physics, random_state):  # -> None:
        """Randomizes the qpos of all arm joints.

        The ranges of qpos values is determined from the MJCF model.

        Args:
          physics: A `mujoco.Physics` instance.
          random_state: An `np.random.RandomState` instance.
        """
        ...
    def set_site_to_xpos(
        self, physics, random_state, site, target_pos, target_quat=..., max_ik_attempts=...
    ):  # -> Literal[False]:
        """Moves the arm so that a site occurs at the specified location.

        This function runs the inverse kinematics solver to find a configuration
        arm joints for which the pinch site occurs at the specified location in
        Cartesian coordinates.

        Args:
          physics: A `mujoco.Physics` instance.
          random_state: An `np.random.RandomState` instance.
          site: Either a `mjcf.Element` or a string specifying the full name
            of the site whose position is being set.
          target_pos: The desired Cartesian location of the site.
          target_quat: (optional) The desired orientation of the site, expressed
            as a quaternion. If `None`, the default orientation is to point
            vertically downwards.
          max_ik_attempts: (optional) Maximum number of attempts to make at finding
            a solution satisfying `target_pos` and `target_quat`. The joint
            positions will be randomized after each unsuccessful attempt.

        Returns:
          A boolean indicating whether the desired configuration is obtained.

        Raises:
          ValueError: If site is neither a string nor an `mjcf.Element`.
        """
        ...
    @property
    @abc.abstractmethod
    def joints(self):
        """Returns the joint elements of the arm."""
        ...
    @property
    @abc.abstractmethod
    def wrist_site(self):
        """Returns the wrist site element of the arm."""
        ...

class JointsObservables(composer.Observables):
    """Observables common to all robot arms."""

    @define.observable
    def joints_pos(self):  # -> MJCFFeature:
        ...
    @define.observable
    def joints_vel(self):  # -> MJCFFeature:
        ...

class RobotHand(composer.Robot, metaclass=abc.ABCMeta):
    """The abstract base class for robotic hands."""

    @abc.abstractmethod
    def set_grasp(self, physics, close_factors):  # -> None:
        """Sets the finger position to the desired positions.

        Args:
          physics: An instance of `mjcf.Physics`.
          close_factors: A number or list of numbers defining the desired grasp
            position of each finger. A value of 0 corresponds to fully opening a
            finger, while a value of 1 corresponds to fully closing it. If a single
            number is specified, the same position is applied to all fingers.
        """
        ...
    @property
    @abc.abstractmethod
    def tool_center_point(self):  # -> None:
        """Returns the tool center point element of the hand."""
        ...
