"""
This type stub file was generated by pyright.
"""

from dm_control import composer

"""Detects the presence of registered entities within a cuboidal region."""
_RENDERED_HEIGHT_IN_2D_MODE = ...

class _Detection:
    __slots__ = ...
    def __init__(self, entity, detected=...) -> None: ...

class PositionDetector(composer.Entity):
    """Detects the presence of registered entities within an axis-aligned box.

    The volume of this detector is defined by a "lower" corner and an "upper"
    corner, which suffice to define an axis-aligned box.
    An entity is considered "detected" if the `xpos` value of any one of its geom
    lies within the active region defined by this detector. Note that this is NOT
    a contact-based detector. Generally speaking, a geom will not be detected
    until it is already "half inside" the region.

    This detector supports both 2D and 3D modes. In 2D mode, the active region
    has an effective infinite height along the z-direction.

    This detector also provides an "inverted" detection mode, where an entity is
    detected when it is not inside the detector's region.
    """

    def resize(self, pos, size):  # -> None:
        ...
    def set_colors(self, rgba, detected_rgba):  # -> None:
        ...
    def set_color(self, rgba):  # -> None:
        ...
    def set_detected_color(self, detected_rgba):  # -> None:
        ...
    def set_position(self, physics, pos):  # -> None:
        ...
    @property
    def mjcf_model(self):  # -> RootElement:
        ...
    def register_entities(self, *entities):  # -> None:
        ...
    def deregister_entities(self):  # -> None:
        ...
    @property
    def detected_entities(self):  # -> list[Unknown]:
        """A list of detected entities."""
        ...
    def initialize_episode_mjcf(self, unused_random_state):  # -> None:
        ...
    def initialize_episode(self, physics, unused_random_state):  # -> None:
        ...
    def before_step(self, physics, unused_random_state):  # -> None:
        ...
    def after_substep(self, physics, unused_random_state):  # -> None:
        ...
    def site_pos(self, physics): ...
    @property
    def activated(self):  # -> bool:
        ...
    @property
    def upper(self):  # -> NDArray[bool_]:
        ...
    @property
    def lower(self):  # -> NDArray[Any]:
        ...
    @property
    def mid(self):  # -> NDArray[floating[Any]]:
        ...
    @property
    def lower_site(self): ...
    @property
    def mid_site(self): ...
    @property
    def upper_site(self): ...
    @property
    def lower_sensor(self): ...
    @property
    def mid_sensor(self): ...
    @property
    def upper_sensor(self): ...
