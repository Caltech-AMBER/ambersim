"""
This type stub file was generated by pyright.
"""

from typing import List, Union, overload

import mujoco
from mujoco.mjx._src import types

"""
This type stub file was generated by pyright.
"""
_MJ_TYPE_ATTR = ...
_TYPE_MAP = ...
_TRANSFORMS = ...
_INVERSE_TRANSFORMS = ...
_DERIVED = ...

@overload
def device_put(value: mujoco.MjModel) -> types.Model: ...
@overload
def device_put(value: mujoco.MjData) -> types.Data: ...
def device_put(value):
    """Places mujoco data onto a device.

    Args:
      value: a mujoco struct to transfer

    Returns:
      on-device MJX struct reflecting the input value
    """
    ...

@overload
def device_get_into(result: Union[mujoco.MjData, List[mujoco.MjData]], value: types.Data): ...
def device_get_into(result, value):
    """Transfers data off device into a mujoco MjData.

    Data on device often has a batch dimension which adds (N,) to the beginning
    of each array shape where N = batch size.

    If result is a single MjData, arrays are copied over with the batch dimension
    intact. If result is a list, the list must be length N and will be populated
    with distinct MjData structs where the batch dimension is stripped.

    Args:
      result: struct (or list of structs) to transfer into
      value: device value to transfer

    Raises:
      RuntimeError: if result length doesn't match data batch size
    """
    ...
