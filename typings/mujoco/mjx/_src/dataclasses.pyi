"""
This type stub file was generated by pyright.
"""

import typing
from typing import Dict, Optional, TypeVar

import jax

"""
This type stub file was generated by pyright.
"""
_T = TypeVar("_T")

def dataclass(clz: _T) -> _T:
    """Wraps a dataclass with metadata for which fields are pytrees.

    This is based off flax.struct.dataclass, but instead of using field
    descriptors to specify which fields are pytrees, we follow a simple rule:
    a leaf field is a pytree node if and only if it's a jax.Array

    Args:
      clz: the class to register as a dataclass

    Returns:
      the resulting dataclass, registered with Jax
    """
    ...

TNode = TypeVar("TNode", bound="PyTreeNode")

class PyTreeNode:
    """Base class for dataclasses that should act like a JAX pytree node.

    This base class additionally avoids type checking errors when using PyType.
    """

    def __init_subclass__(cls): ...
    def __init__(self, *args, **kwargs) -> None: ...
    def replace(self: TNode, **overrides) -> TNode: ...
    def tree_replace(self, params: Dict[str, Optional[jax.typing.ArrayLike]]) -> PyTreeNode: ...
