"""
This type stub file was generated by pyright.
"""

import jax
from mujoco.mjx._src.types import Data, Model

"""
This type stub file was generated by pyright.
"""

def kinematics(m: Model, d: Data) -> Data:
    """Converts position/velocity from generalized coordinates to maximal."""
    ...

def com_pos(m: Model, d: Data) -> Data:
    """Maps inertias and motion dofs to global frame centered at subtree-CoM."""
    ...

def crb(m: Model, d: Data) -> Data:
    """Runs composite rigid body inertia algorithm."""
    ...

def factor_m(m: Model, d: Data, qM: jax.Array) -> Data:
    """Gets sparse L'*D*L factorizaton of inertia-like matrix M, assumed spd."""
    ...

def solve_m(m: Model, d: Data, x: jax.Array) -> jax.Array:
    """Computes sparse backsubstitution:  x = inv(L'*D*L)*y ."""
    ...

def dense_m(m: Model, d: Data) -> jax.Array:
    """Reconstitute dense mass matrix from qM."""
    ...

def mul_m(m: Model, d: Data, vec: jax.Array) -> jax.Array:
    """Multiply vector by inertia matrix."""
    ...

def com_vel(m: Model, d: Data) -> Data:
    """Computes cvel, cdof_dot."""
    ...

def rne(m: Model, d: Data) -> Data:
    """Computes inverse dynamics using the recursive Newton-Euler algorithm."""
    ...

def transmission(m: Model, d: Data) -> Data:
    """Computes actuator/transmission lengths and moments."""
    ...
