"""
This type stub file was generated by pyright.
"""

from typing import Optional

import jax
from mujoco.mjx._src.dataclasses import PyTreeNode
from mujoco.mjx._src.types import Data, Model

"""Constraint solvers."""

class _Context(PyTreeNode):
    """Data updated during each solver iteration.

    Attributes:
      qacc: acceleration (from Data)                    (nv,)
      qfrc_constraint: constraint force (from Data)     (nv,)
      Jaref: Jac*qacc - aref                            (nefc,)
      efc_force: constraint force in constraint space   (nefc,)
      M: dense mass matrix, populated for nv < 100      (nv, nv)
      Ma: M*qacc                                        (nv,)
      grad: gradient of master cost                     (nv,)
      Mgrad: M / grad                                   (nv,)
      search: linesearch vector                         (nv,)
      gauss: gauss Cost
      cost: constraint + Gauss cost
      prev_cost: cost from previous iter
      solver_niter: number of solver iterations
    """

    qacc: jax.Array
    qfrc_constraint: jax.Array
    Jaref: jax.Array
    efc_force: jax.Array
    M: Optional[jax.Array]
    Ma: jax.Array
    grad: jax.Array
    Mgrad: jax.Array
    search: jax.Array
    gauss: jax.Array
    cost: jax.Array
    prev_cost: jax.Array
    solver_niter: jax.Array
    @classmethod
    def create(cls, m: Model, d: Data, grad: bool = ...) -> _Context: ...

class _LSPoint(PyTreeNode):
    """Line search evaluation point.

    Attributes:
      alpha: step size that reduces f(x + alpha * p) given search direction p
      cost: line search cost
      deriv_0: first derivative of quadratic
      deriv_1: second derivative of quadratic
    """

    alpha: jax.Array
    cost: jax.Array
    deriv_0: jax.Array
    deriv_1: jax.Array
    @classmethod
    def create(
        cls, d: Data, ctx: _Context, alpha: jax.Array, jv: jax.Array, quad: jax.Array, quad_gauss: jax.Array
    ) -> _LSPoint:
        """Creates a linesearch point with first and second derivatives."""
        ...

class _LSContext(PyTreeNode):
    """Data updated during each line search iteration.

    Attributes:
      lo: low point bounding the line search interval
      hi: high point bounding the line search interval
      swap: True if low or hi was swapped in the line search iteration
      ls_iter: number of linesearch iterations
    """

    lo: _LSPoint
    hi: _LSPoint
    swap: jax.Array
    ls_iter: jax.Array
    ...

def solve(m: Model, d: Data) -> Data:
    """Finds forces that satisfy constraints using conjugate gradient descent."""
    ...
