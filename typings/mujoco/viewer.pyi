"""
This type stub file was generated by pyright.
"""

import abc
import queue
from typing import Callable, Optional, Tuple, Union

import glfw
import mujoco

"""Interactive GUI viewer for MuJoCo."""
if not glfw._glfw: ...
else: ...
PERCENT_REALTIME = ...
MAX_SYNC_MISALIGN = ...
SIM_REFRESH_FRACTION = ...
CallbackType = Callable[[mujoco.MjModel, mujoco.MjData], None]
LoaderType = Callable[[], Tuple[mujoco.MjModel, mujoco.MjData]]
KeyCallbackType = Callable[[int], None]
_LoaderWithPathType = Callable[[], Tuple[mujoco.MjModel, mujoco.MjData, str]]
_InternalLoaderType = Union[LoaderType, _LoaderWithPathType]
_Simulate = ...

class Handle:
    """A handle for interacting with a MuJoCo viewer."""

    def __init__(
        self,
        sim: _Simulate,
        cam: mujoco.MjvCamera,
        opt: mujoco.MjvOption,
        pert: mujoco.MjvPerturb,
        user_scn: Optional[mujoco.MjvScene],
    ) -> None: ...
    @property
    def cam(self): ...
    @property
    def opt(self): ...
    @property
    def perturb(self): ...
    @property
    def user_scn(self):  # -> None:
        ...
    def close(self):  # -> None:
        ...
    def is_running(self) -> bool: ...
    def lock(self):  # -> nullcontext[None]:
        ...
    def sync(self):  # -> None:
        ...
    def update_hfield(self, hfieldid: int):  # -> None:
        ...
    def update_mesh(self, meshid: int):  # -> None:
        ...
    def update_texture(self, texid: int):  # -> None:
        ...
    def __enter__(self):  # -> Self@Handle:
        ...
    def __exit__(self, exc_type, exc_val, exc_tb):  # -> None:
        ...

class _MjPythonBase(metaclass=abc.ABCMeta):
    def launch_on_ui_thread(
        self,
        model: mujoco.MjModel,
        data: mujoco.MjData,
        handle_return: Optional[queue.Queue[Handle]],
        key_callback: Optional[KeyCallbackType],
    ):  # -> None:
        ...

_MJPYTHON: Optional[_MjPythonBase] = ...

def launch(
    model: Optional[mujoco.MjModel] = ...,
    data: Optional[mujoco.MjData] = ...,
    *,
    loader: Optional[LoaderType] = ...,
    show_left_ui: bool = ...,
    show_right_ui: bool = ...,
) -> None:
    """Launches the Simulate GUI."""
    ...

def launch_from_path(path: str) -> None:
    """Launches the Simulate GUI from file path."""
    ...

def launch_passive(
    model: mujoco.MjModel,
    data: mujoco.MjData,
    *,
    key_callback: Optional[KeyCallbackType] = ...,
    show_left_ui: bool = ...,
    show_right_ui: bool = ...,
) -> Handle:
    """Launches a passive Simulate GUI without blocking the running thread."""
    ...

if __name__ == "__main__":
    _MJCF_PATH = ...
    def main(argv) -> None: ...
