"""
This type stub file was generated by pyright.
"""

import contextlib
import sys

import mujoco
from absl.testing import absltest, parameterized

"""Tests for MuJoCo Python bindings."""
TEST_XML = ...
TEST_XML_SENSOR = ...
TEST_XML_PLUGIN = ...

@contextlib.contextmanager
def temporary_callback(setter, callback):  # -> Generator[None, Any, None]:
    ...

class MuJoCoBindingsTest(parameterized.TestCase):
    def setUp(self):  # -> None:
        ...
    def test_load_xml_can_handle_name_clash(self):  # -> None:
        ...
    def test_can_read_array(self):  # -> None:
        ...
    def test_can_set_array(self):  # -> None:
        ...
    def test_array_is_a_view(self):  # -> None:
        ...
    @absltest.skipIf(sys.implementation.name == "pypy", reason="requires sys.getrefcount")
    def test_array_keeps_struct_alive(self):  # -> None:
        ...
    def test_named_indexing_actuator_ctrl(self):  # -> None:
        ...
    def test_named_indexing_invalid_names_in_model(self):  # -> None:
        ...
    def test_named_indexing_no_name_argument_in_model(self):  # -> None:
        ...
    def test_named_indexing_invalid_names_in_data(self):  # -> None:
        ...
    def test_named_indexing_no_name_argument_in_data(self):  # -> None:
        ...
    def test_named_indexing_invalid_index_in_model(self):  # -> None:
        ...
    def test_named_indexing_invalid_index_in_data(self):  # -> None:
        ...
    def test_named_indexing_geom_size(self):  # -> None:
        ...
    def test_named_indexing_geom_quat(self):  # -> None:
        ...
    def test_named_indexing_ragged_qpos(self):  # -> None:
        ...
    def test_named_indexing_ragged2d_cdof(self):  # -> None:
        ...
    def test_named_indexing_repr_in_data(self):  # -> None:
        ...
    def test_named_indexing_body_repr_in_data(self):  # -> None:
        ...
    def test_named_indexing_repr_in_model(self):  # -> None:
        ...
    def test_addresses_differ_between_structs(self):  # -> None:
        ...
    def test_mjmodel_can_read_and_write_opt(self):  # -> None:
        ...
    def test_mjmodel_can_read_and_write_stat(self):  # -> None:
        ...
    def test_mjmodel_can_read_and_write_vis(self):  # -> None:
        ...
    def test_mjmodel_can_access_names_directly(self):  # -> None:
        ...
    def test_mjmodel_names_doesnt_copy(self):  # -> None:
        ...
    def test_vis_global_exposed_as_global_(self):  # -> None:
        ...
    def test_mjoption_can_make_default(self):  # -> None:
        ...
    def test_mjoption_can_copy(self):  # -> None:
        ...
    def test_mjmodel_can_copy(self):  # -> None:
        ...
    def test_assets_array_filename_too_long(self):  # -> None:
        ...
    def test_mjdata_can_copy(self):  # -> None:
        ...
    def test_mjdata_can_read_warning_array(self):  # -> None:
        ...
    def test_mjcontact_can_copy(self):  # -> None:
        ...
    def test_mj_step(self):  # -> None:
        ...
    def test_mj_step_multiple(self):  # -> None:
        ...
    def test_mj_contact_list(self):  # -> None:
        ...
    def test_realloc_con_efc(self):  # -> None:
        ...
    def test_mj_struct_list_equality(self):  # -> None:
        ...
    @parameterized.named_parameters(
        [
            ("MjOption", mujoco.MjOption, "tolerance"),
            ("MjWarningStat", mujoco.MjWarningStat, "number"),
            ("MjTimerStat", mujoco.MjTimerStat, "number"),
            ("MjSolverStat", mujoco.MjSolverStat, "neval"),
            ("MjContact", mujoco.MjContact, "dist"),
            ("MjStatistic", mujoco.MjStatistic, "extent"),
            ("MjLROpt", mujoco.MjLROpt, "maxforce"),
            ("MjvPerturb", mujoco.MjvPerturb, "select"),
            ("MjvCamera", mujoco.MjvCamera, "fixedcamid"),
        ]
    )
    def test_mj_struct_equality(self, cls, attr):  # -> None:
        ...
    def test_mj_struct_equality_array(self):  # -> None:
        ...
    @parameterized.named_parameters(
        [
            ("MjOption", mujoco.MjOption, "tolerance"),
            ("MjWarningStat", mujoco.MjWarningStat, "number"),
            ("MjTimerStat", mujoco.MjTimerStat, "number"),
            ("MjSolverStat", mujoco.MjSolverStat, "neval"),
            ("MjContact", mujoco.MjContact, "dist"),
            ("MjStatistic", mujoco.MjStatistic, "extent"),
            ("MjLROpt", mujoco.MjLROpt, "maxforce"),
            ("MjvPerturb", mujoco.MjvPerturb, "select"),
            ("MjvCamera", mujoco.MjvCamera, "fixedcamid"),
        ]
    )
    def test_mj_struct_repr(self, cls, attr):  # -> None:
        ...
    def test_mj_struct_repr_for_subclass(self):  # -> None:
        class MjWarningStatSubclass(mujoco.MjWarningStat): ...

    def test_mju_rotVecQuat(self):  # -> None:
        ...
    def test_getsetstate(self):  # -> None:
        ...
    def test_mj_jacSite(self):  # -> None:
        ...
    def test_docstrings(self):  # -> None:
        ...
    def test_int_constant(self):  # -> None:
        ...
    def test_float_constant(self):  # -> None:
        ...
    def test_string_constants(self):  # -> None:
        ...
    def test_enum_values(self):  # -> None:
        ...
    def test_enum_from_int(self):  # -> None:
        ...
    def test_enum_as_index(self):  # -> None:
        ...
    def test_enum_ops(self):  # -> None:
        ...
    def test_can_raise_error(self):  # -> None:
        ...
    def test_mjcb_time(self):  # -> None:
        class CallCounter: ...

    def test_mjcb_time_exception(self):  # -> None:
        class TestError(RuntimeError): ...

    def test_mjcb_time_wrong_return_type(self):  # -> None:
        ...
    def test_mjcb_time_not_callable(self):  # -> None:
        ...
    def test_mjcb_sensor(self):  # -> None:
        class SensorCallback: ...

    @absltest.skipIf(sys.implementation.name == "pypy", reason="requires sys.getrefcount")
    def test_mjcb_control_not_leak_memory(self):  # -> None:
        ...
    @absltest.skipIf(sys.implementation.name == "pypy", reason="requires sys.getrefcount")
    def test_mjdata_holds_ref_to_model(self):  # -> None:
        ...
    def test_can_initialize_mjv_structs(self):  # -> None:
        ...
    def test_mjv_camera(self):  # -> None:
        ...
    def test_mjv_scene(self):  # -> None:
        ...
    def test_mjv_scene_without_model(self):  # -> None:
        ...
    def test_mj_ray(self):  # -> None:
        ...
    def test_inverse_fd_none(self):  # -> None:
        ...
    def test_inverse_fd(self):  # -> None:
        ...
    def test_mjd_sub_quat(self):  # -> None:
        ...
    def test_mjd_quat_intergrate(self):  # -> None:
        ...
    def test_banded(self):  # -> None:
        ...
    def test_mju_box_qp(self):  # -> None:
        ...
    def test_mju_fill(self):  # -> None:
        ...
    def test_mju_eye(self):  # -> None:
        ...
    def test_mju_symmetrize(self):  # -> None:
        ...
    def test_mju_clip(self):  # -> None:
        ...
    def test_mju_mul_vec_mat_vec(self):  # -> None:
        ...
    @parameterized.product(flg_html=(False, True), flg_pad=(False, True))
    def test_mj_printSchema(self, flg_html, flg_pad):  # -> None:
        ...
    def test_pickle_mjdata(self):  # -> None:
        ...
    def test_pickle_mjmodel(self):  # -> None:
        ...
    def test_indexer_name_id(self):  # -> None:
        ...
    def test_load_plugin(self):  # -> None:
        ...
    def test_copy_mjdata_with_plugin(self):  # -> None:
        ...
    def test_deepcopy_mjdata_with_plugin(self):  # -> None:
        ...

if __name__ == "__main__": ...
