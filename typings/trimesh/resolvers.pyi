"""
This type stub file was generated by pyright.
"""

import abc

from . import util

"""
resolvers.py
---------------

Provides a common interface to load assets referenced by name
like MTL files, texture images, etc. Assets can be from ZIP
archives, web assets, or a local file path.
"""

class Resolver(util.ABC):
    """
    The base class for resolvers.
    """

    @abc.abstractmethod
    def __init__(self, *args, **kwargs) -> None: ...
    @abc.abstractmethod
    def get(self, key): ...
    @abc.abstractmethod
    def write(self, name, data): ...
    @abc.abstractmethod
    def namespaced(self, namespace): ...
    def __getitem__(self, key): ...
    def __setitem__(self, key, value): ...
    def __contains__(self, key):  # -> bool:
        ...

class FilePathResolver(Resolver):
    """
    Resolve files from a source path on the file system.
    """

    def __init__(self, source) -> None:
        """
        Resolve files based on a source path.

        Parameters
        ------------
        source : str
          File path where mesh was loaded from
        """
        ...
    def keys(self):  # -> Generator[str, Any, None]:
        """
        List all files available to be loaded.

        Yields
        -----------
        name : str
          Name of a file which can be accessed.
        """
        ...
    def namespaced(self, namespace):  # -> FilePathResolver:
        """
        Return a resolver which changes the root of the
        resolver by an added namespace.

        Parameters
        -------------
        namespace : str
          Probably a subdirectory

        Returns
        --------------
        resolver : FilePathResolver
          Resolver with root directory changed.
        """
        ...
    def get(self, name):  # -> bytes:
        """
        Get an asset.

        Parameters
        -------------
        name : str
          Name of the asset

        Returns
        ------------
        data : bytes
          Loaded data from asset
        """
        ...
    def write(self, name, data):  # -> None:
        """
        Write an asset to a file path.

        Parameters
        -----------
        name : str
          Name of the file to write
        data : str or bytes
          Data to write to the file
        """
        ...

class ZipResolver(Resolver):
    """
    Resolve files inside a ZIP archive.
    """

    def __init__(self, archive=..., namespace=...) -> None:
        """
        Resolve files inside a ZIP archive as loaded by
        trimesh.util.decompress

        Parameters
        -------------
        archive : dict
          Contains resources as file object
        namespace : None or str
          If passed will only show keys that start
          with this value and this substring must be
          removed for any get calls.
        """
        ...
    def keys(self):  # -> list[Unknown] | dict_keys[Unknown, Unknown]:
        """
        Get the available keys in the current archive.

        Returns
        -----------
        keys : iterable
          Keys in the current archive.
        """
        ...
    def write(self, key, value):  # -> None:
        """
        Store a value in the current archive.

        Parameters
        -----------
        key : hashable
          Key to store data under.
        value : str, bytes, file-like
          Value to store.
        """
        ...
    def get(self, name):  # -> bytes | str | None:
        """
        Get an asset from the ZIP archive.

        Parameters
        -------------
        name : str
          Name of the asset

        Returns
        -------------
        data : bytes
          Loaded data from asset
        """
        ...
    def namespaced(self, namespace):  # -> ZipResolver:
        """
        Return a "sub-resolver" with a root namespace.

        Parameters
        -------------
        namespace : str
          The root of the key to clip off, i.e. if
          this resolver has key `a/b/c` you can get
          'a/b/c' with resolver.namespaced('a/b').get('c')

        Returns
        -----------
        resolver : Resolver
          Namespaced resolver.
        """
        ...
    def export(self):  # -> bytes:
        """
        Export the contents of the current archive as
        a ZIP file.

        Returns
        ------------
        compressed : bytes
          Compressed data in ZIP format.
        """
        ...

class WebResolver(Resolver):
    """
    Resolve assets from a remote URL.
    """

    def __init__(self, url) -> None:
        """
        Resolve assets from a base URL.

        Parameters
        --------------
        url : str
          Location where a mesh was stored or
          directory where mesh was stored
        """
        ...
    def get(self, name):  # -> bytes:
        """
        Get a resource from the remote site.

        Parameters
        -------------
        name : str
          Asset name, i.e. 'quadknot.obj.mtl'
        """
        ...
    def namespaced(self, namespace):  # -> WebResolver:
        """
        Return a namespaced version of current resolver.

        Parameters
        -------------
        namespace : str
          URL fragment

        Returns
        -----------
        resolver : WebResolver
          With sub-url: `https://example.com/{namespace}`
        """
        ...
    def write(self, key, value): ...

class GithubResolver(Resolver):
    def __init__(self, repo, branch=..., commit=..., save=...) -> None:
        """
        Get files from a remote Github repository by
        downloading a zip file with the entire branch
        or a specific commit.

        Parameters
        -------------
        repo : str
          In the format of `owner/repo`
        branch : str
          The remote branch you want to get files from.
        commit : str
          The full commit hash: pass either this OR branch.
        save : None or str
          A path if you want to save results locally.
        """
        ...
    def keys(self):  # -> list[Unknown] | dict_keys[Unknown, Unknown]:
        """
        List the available files in the repository.

        Returns
        ----------
        keys : iterable
          Keys available to the resolved.
        """
        ...
    def write(self, name, data): ...
    @property
    def zipped(self):  # -> ZipResolver:
        """

        - opened zip file
        - locally saved zip file
        - retrieve zip file and saved
        """
        ...
    def get(self, key):  # -> bytes | str | None:
        ...
    def namespaced(self, namespace):  # -> ZipResolver:
        """
        Return a "sub-resolver" with a root namespace.

        Parameters
        -------------
        namespace : str
          The root of the key to clip off, i.e. if
          this resolver has key `a/b/c` you can get
          'a/b/c' with resolver.namespaced('a/b').get('c')

        Returns
        -----------
        resolver : Resolver
          Namespaced resolver.
        """
        ...

def nearby_names(name, namespace=...):  # -> Generator[Unknown | LiteralString, Any, None]:
    """
    Try to find nearby variants of a specified name.

    Parameters
    ------------
    name : str
      Initial name.

    Yields
    -----------
    nearby : str
      Name that is a lightly permutated version
      of the initial name.
    """
    ...
