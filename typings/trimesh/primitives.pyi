"""
This type stub file was generated by pyright.
"""

import abc

import numpy as np

from . import caching
from .base import Trimesh

"""
primitives.py
----------------

Subclasses of Trimesh objects that are parameterized as primitives.

Useful because you can move boxes and spheres around
and then use trimesh operations on them at any point.
"""
_IDENTITY = np.eye(4)

class Primitive(Trimesh):
    """
    Geometric Primitives which are a subclass of Trimesh.
    Mesh is generated lazily when vertices or faces are requested.
    """

    __copy__ = ...
    __deepcopy__ = ...
    def __init__(self) -> None: ...
    def __repr__(self):  # -> str:
        ...
    @property
    def faces(self):  # -> None:
        ...
    @faces.setter
    def faces(self, values):  # -> None:
        ...
    @property
    def vertices(self):  # -> None:
        ...
    @vertices.setter
    def vertices(self, values):  # -> None:
        ...
    @property
    def face_normals(self):  # -> NDArray[float64] | None:
        ...
    @face_normals.setter
    def face_normals(self, values):  # -> None:
        ...
    @property
    def transform(self):
        """
        The transform of the Primitive object.

        Returns
        -------------
        transform : (4, 4) float
          Homogeneous transformation matrix
        """
        ...
    @abc.abstractmethod
    def to_dict(self):
        """
        Should be implemented by each primitive.
        """
        ...
    def copy(self, **kwargs):  # -> Self@Primitive:
        """
        Return a copy of the Primitive object.

        Returns
        -------------
        copied : object
          Copy of current primitive
        """
        ...
    def to_mesh(self, **kwargs):  # -> Trimesh:
        """
        Return a copy of the Primitive object as a Trimesh.

        Parameters
        -----------
        kwargs : dict
          Passed to the Trimesh object constructor.

        Returns
        ------------
        mesh : trimesh.Trimesh
          Tessellated version of the primitive.
        """
        ...
    def apply_transform(self, matrix):  # -> Self@Primitive | Box | Cylinder | Capsule | Sphere:
        """
        Apply a transform to the current primitive by
        applying a new transform on top of existing
        `self.primitive.transform`. If the matrix
        contains scaling it will change parameters
        like `radius` or `height` automatically.

        Parameters
        ------------
        matrix: (4, 4) float
          Homogeneous transformation
        """
        ...

class PrimitiveAttributes:
    """
    Hold the mutable data which defines a primitive.
    """

    def __init__(self, parent, defaults, kwargs, mutable=...) -> None:
        """
        Hold the attributes for a Primitive.

        Parameters
        ------------
        parent : Primitive
          Parent object reference.
        defaults : dict
          The default values for this primitive type.
        kwargs : dict
          User-passed values, i.e. {'radius': 10.0}
        """
        ...
    @property
    def __doc__(self):  # -> str:
        ...
    def __getattr__(self, key): ...
    def __setattr__(self, key, value):  # -> None:
        ...
    def __dir__(self):  # -> list[str]:
        ...

class Cylinder(Primitive):
    def __init__(self, radius=..., height=..., transform=..., sections=..., mutable=...) -> None:
        """
        Create a Cylinder Primitive, a subclass of Trimesh.

        Parameters
        -------------
        radius : float
          Radius of cylinder
        height : float
          Height of cylinder
        transform : (4, 4) float
          Homogeneous transformation matrix
        sections : int
          Number of facets in circle.
        mutable : bool
          Are extents and transform mutable after creation.
        """
        ...
    @caching.cache_decorator
    def volume(self):
        """
        The analytic volume of the cylinder primitive.

        Returns
        ---------
        volume : float
          Volume of the cylinder
        """
        ...
    @caching.cache_decorator
    def moment_inertia(self):  # -> Any | NDArray[floating[Any]]:
        """
        The analytic inertia tensor of the cylinder primitive.

        Returns
        ----------
        tensor: (3, 3) float
          3D inertia tensor
        """
        ...
    @caching.cache_decorator
    def direction(self):  # -> Any:
        """
        The direction of the cylinder's axis.

        Returns
        --------
        axis: (3,) float, vector along the cylinder axis
        """
        ...
    @property
    def segment(self):  # -> Any:
        """
        A line segment which if inflated by cylinder radius
        would represent the cylinder primitive.

        Returns
        -------------
        segment : (2, 3) float
          Points representing a single line segment
        """
        ...
    def to_dict(self):  # -> dict[str, Unknown]:
        """
        Get a copy of the current Cylinder primitive as
        a JSON-serializable dict that matches the schema
        in `trimesh/resources/schema/cylinder.schema.json`

        Returns
        ----------
        as_dict : dict
          Serializable data for this primitive.
        """
        ...
    def buffer(self, distance):  # -> Cylinder:
        """
        Return a cylinder primitive which covers the source
        cylinder by distance: radius is inflated by distance
        height by twice the distance.

        Parameters
        ------------
        distance : float
          Distance to inflate cylinder radius and height

        Returns
        -------------
        buffered : Cylinder
         Cylinder primitive inflated by distance
        """
        ...

class Capsule(Primitive):
    def __init__(self, radius=..., height=..., transform=..., sections=..., mutable=...) -> None:
        """
        Create a Capsule Primitive, a subclass of Trimesh.

        Parameters
        ----------
        radius : float
          Radius of cylinder
        height : float
          Height of cylinder
        transform : (4, 4) float
          Transformation matrix
        sections : int
          Number of facets in circle
        mutable : bool
          Are extents and transform mutable after creation.
        """
        ...
    @property
    def transform(self): ...
    def to_dict(self):  # -> dict[str, Unknown]:
        """
        Get a copy of the current Capsule primitive as
        a JSON-serializable dict that matches the schema
        in `trimesh/resources/schema/capsule.schema.json`

        Returns
        ----------
        as_dict : dict
          Serializable data for this primitive.
        """
        ...
    @caching.cache_decorator
    def direction(self):  # -> Any:
        """
        The direction of the capsule's axis.

        Returns
        --------
        axis : (3,) float
          Vector along the cylinder axis
        """
        ...

class Sphere(Primitive):
    def __init__(self, radius=..., center=..., transform=..., subdivisions=..., mutable=...) -> None:
        """
        Create a Sphere Primitive, a subclass of Trimesh.

        Parameters
        ----------
        radius : float
          Radius of sphere
        center : None or (3,) float
          Center of sphere.
        transform : None or (4, 4) float
          Full homogeneous transform. Pass `center` OR `transform.
        subdivisions : int
          Number of subdivisions for icosphere.
        mutable : bool
          Are extents and transform mutable after creation.
        """
        ...
    @property
    def center(self): ...
    @center.setter
    def center(self, value):  # -> None:
        ...
    def to_dict(self):  # -> dict[str, Unknown]:
        """
        Get a copy of the current Sphere primitive as
        a JSON-serializable dict that matches the schema
        in `trimesh/resources/schema/sphere.schema.json`

        Returns
        ----------
        as_dict : dict
          Serializable data for this primitive.
        """
        ...
    @property
    def bounds(self):  # -> NDArray[Unknown]:
        ...
    @property
    def bounding_box_oriented(self):  # -> Any:
        ...
    @caching.cache_decorator
    def area(self):
        """
        Surface area of the current sphere primitive.

        Returns
        --------
        area: float, surface area of the sphere Primitive
        """
        ...
    @caching.cache_decorator
    def volume(self):
        """
        Volume of the current sphere primitive.

        Returns
        --------
        volume: float, volume of the sphere Primitive
        """
        ...
    @caching.cache_decorator
    def moment_inertia(self):
        """
        The analytic inertia tensor of the sphere primitive.

        Returns
        ----------
        tensor: (3, 3) float
          3D inertia tensor.
        """
        ...

class Box(Primitive):
    def __init__(self, extents=..., transform=..., bounds=..., mutable=...) -> None:
        """
        Create a Box Primitive as a subclass of Trimesh

        Parameters
        ----------
        extents : Optional[ndarray] (3,) float
          Length of each side of the 3D box.
        transform : Optional[ndarray] (4, 4) float
          Homogeneous transformation matrix for box center.
        bounds : Optional[ndarray] (2, 3) float
          Axis aligned bounding box, if passed extents and
          transform will be derived from this.
        mutable : bool
          Are extents and transform mutable after creation.
        """
        ...
    def to_dict(self):  # -> dict[str, Unknown]:
        """
        Get a copy of the current Box primitive as
        a JSON-serializable dict that matches the schema
        in `trimesh/resources/schema/box.schema.json`

        Returns
        ----------
        as_dict : dict
          Serializable data for this primitive.
        """
        ...
    @property
    def transform(self): ...
    def sample_volume(self, count):  # -> NDArray[float64] | Any:
        """
        Return random samples from inside the volume of the box.

        Parameters
        -------------
        count : int
          Number of samples to return

        Returns
        ----------
        samples : (count, 3) float
          Points inside the volume
        """
        ...
    def sample_grid(self, count=..., step=...):  # -> NDArray[float64] | Any:
        """
        Return a 3D grid which is contained by the box.
        Samples are either 'step' distance apart, or there are
        'count' samples per box side.

        Parameters
        -----------
        count : int or (3,) int
          If specified samples are spaced with np.linspace
        step : float or (3,) float
          If specified samples are spaced with np.arange

        Returns
        -----------
        grid : (n, 3) float
          Points inside the box
        """
        ...
    @property
    def is_oriented(self):  # -> bool:
        """
        Returns whether or not the current box is rotated at all.
        """
        ...
    @caching.cache_decorator
    def volume(self):  # -> float:
        """
        Volume of the box Primitive.

        Returns
        --------
        volume : float
          Volume of box.
        """
        ...
    def as_outline(self):  # -> Path | Scene:
        """
        Return a Path3D containing the outline of the box.

        Returns
        -----------
        outline : trimesh.path.Path3D
          Outline of box primitive
        """
        ...

class Extrusion(Primitive):
    def __init__(self, polygon=..., transform=..., height=..., mutable=...) -> None:
        """
        Create an Extrusion primitive, which
        is a subclass of Trimesh.

        Parameters
        ----------
        polygon : shapely.geometry.Polygon
          Polygon to extrude
        transform : (4, 4) float
          Transform to apply after extrusion
        height : float
          Height to extrude polygon by
        mutable : bool
          Are extents and transform mutable after creation.
        """
        ...
    @caching.cache_decorator
    def area(self):
        """
        The surface area of the primitive extrusion.

        Calculated from polygon and height to avoid mesh creation.

        Returns
        ----------
        area: float
          Surface area of 3D extrusion
        """
        ...
    @caching.cache_decorator
    def volume(self):
        """
        The volume of the Extrusion primitive.
        Calculated from polygon and height to avoid mesh creation.

        Returns
        ----------
        volume : float
          Volume of 3D extrusion
        """
        ...
    @caching.cache_decorator
    def direction(self):  # -> Any:
        """
        Based on the extrudes transform what is the
        vector along which the polygon will be extruded.

        Returns
        ---------
        direction : (3,) float
          Unit direction vector
        """
        ...
    @property
    def origin(self):
        """
        Based on the extrude transform what is the
        origin of the plane it is extruded from.

        Returns
        -----------
        origin : (3,) float
          Origin of extrusion plane
        """
        ...
    @property
    def transform(self): ...
    @caching.cache_decorator
    def bounding_box_oriented(self):  # -> Box:
        ...
    def slide(self, distance):  # -> None:
        """
        Alter the transform of the current extrusion to slide it
        along its extrude_direction vector

        Parameters
        -----------
        distance : float
          Distance along self.extrude_direction to move
        """
        ...
    def buffer(self, distance, distance_height=..., **kwargs):  # -> Self@Extrusion:
        """
        Return a new Extrusion object which is expanded in profile
        and in height by a specified distance.

        Parameters
        --------------
        distance : float
          Distance to buffer polygon
        distance_height : float
          Distance to buffer above and below extrusion
        kwargs : dict
          Passed to Extrusion constructor

        Returns
        ----------
        buffered : primitives.Extrusion
          Extrusion object with new values
        """
        ...
    def to_dict(self):  # -> dict[str, Unknown]:
        """
        Get a copy of the current Extrusion primitive as
        a JSON-serializable dict that matches the schema
        in `trimesh/resources/schema/extrusion.schema.json`

        Returns
        ----------
        as_dict : dict
          Serializable data for this primitive.
        """
        ...
