"""
This type stub file was generated by pyright.
"""

"""
rendering.py
--------------

Functions to convert trimesh objects to pyglet/opengl objects.
"""

def convert_to_vertexlist(
    geometry, **kwargs
):  # -> tuple[int, Literal[4], Unknown | None, Unknown | Any, tuple[Literal['v3f/static'], Unknown], tuple[Literal['n3f/static'], Unknown | Any], tuple[str, Unknown] | tuple[Literal['t2f/static'], Unknown]] | tuple[int, Literal[1], None, Any, tuple[Literal['v3f/static'], ndarray[Any, dtype[float64]] | ndarray[Any, dtype[Any]] | ndarray[Any, dtype[Unknown]] | Unknown], tuple[str, Unknown | Any]] | tuple[int, Literal[0], None, Any, tuple[Literal['v3f/static'], ndarray[Any, dtype[float64]]], tuple[str, Any | Unknown]]:
    """
    Try to convert various geometry objects to the constructor
    args for a pyglet indexed vertex list.

    Parameters
    ------------
    obj : Trimesh, Path2D, Path3D, (n,2) float, (n,3) float
      Object to render

    Returns
    ------------
    args : tuple
      Args to be passed to pyglet indexed vertex list
      constructor.
    """
    ...

def mesh_to_vertexlist(
    mesh, group=..., smooth=..., smooth_threshold=...
):  # -> tuple[int, Literal[4], Unknown | None, Unknown | Any, tuple[Literal['v3f/static'], Unknown], tuple[Literal['n3f/static'], Unknown | Any], tuple[str, Unknown] | tuple[Literal['t2f/static'], Unknown]]:
    """
    Convert a Trimesh object to arguments for an
    indexed vertex list constructor.

    Parameters
    -------------
    mesh : trimesh.Trimesh
      Mesh to be rendered
    group : str
      Rendering group for the vertex list
    smooth : bool
      Should we try to smooth shade the mesh
    smooth_threshold : int
      Maximum number of faces to smooth shade

    Returns
    --------------
    args : (7,) tuple
      Args for vertex list constructor

    """
    ...

def path_to_vertexlist(
    path, group=..., **kwargs
):  # -> tuple[int, Literal[1], Unknown | None, Any, tuple[Literal['v3f/static'], ndarray[Any, dtype[float64]] | ndarray[Any, dtype[Any]] | ndarray[Any, dtype[Unknown]] | Unknown], tuple[str, Unknown | Any]]:
    """
    Convert a Path3D object to arguments for a
    pyglet indexed vertex list constructor.

    Parameters
    -------------
    path : trimesh.path.Path3D object
      Mesh to be rendered
    group : str
      Rendering group for the vertex list

    Returns
    --------------
    args : (7,) tuple
      Args for vertex list constructor
    """
    ...

def points_to_vertexlist(
    points, colors=..., group=..., **kwargs
):  # -> tuple[int, Literal[0], Unknown | None, Any, tuple[Literal['v3f/static'], ndarray[Any, dtype[float64]]], tuple[str, Any | Unknown]]:
    """
    Convert a numpy array of 3D points to args for
    a vertex list constructor.

    Parameters
    -------------
    points : (n, 3) float
      Points to be rendered
    colors : (n, 3) or (n, 4) float
      Colors for each point
    group : str
      Rendering group for the vertex list

    Returns
    --------------
    args : (7,) tuple
      Args for vertex list constructor
    """
    ...

def colors_to_gl(colors, count):  # -> tuple[str, Unknown]:
    """
    Given a list of colors (or None) return a GL-acceptable
    list of colors.

    Parameters
    ------------
    colors: (count, (3 or 4)) float
      Input colors as an array

    Returns
    ---------
    colors_type : str
      Color type
    colors_gl : (count,) list
      Colors to pass to pyglet
    """
    ...

def material_to_texture(material, upsize=...):  # -> None:
    """
    Convert a trimesh.visual.texture.Material object into
    a pyglet-compatible texture object.

    Parameters
    --------------
    material : trimesh.visual.texture.Material
      Material to be converted
    upsize: bool
      If True, will upscale textures to their nearest power
      of two resolution to avoid weirdness

    Returns
    ---------------
    texture : pyglet.image.Texture
      Texture loaded into pyglet form
    """
    ...

def matrix_to_gl(matrix):
    """
    Convert a numpy row-major homogeneous transformation matrix
    to a flat column-major GLfloat transformation.

    Parameters
    -------------
    matrix : (4,4) float
      Row-major homogeneous transform

    Returns
    -------------
    glmatrix : (16,) gl.GLfloat
      Transform in pyglet format
    """
    ...

def vector_to_gl(array, *args):
    """
    Convert an array and an optional set of args into a
    flat vector of gl.GLfloat
    """
    ...

def light_to_gl(light, transform, lightN):  # -> list[tuple[Unknown, Unknown, Unknown]]:
    """
    Convert trimesh.scene.lighting.Light objects into
    args for gl.glLightFv calls

    Parameters
    --------------
    light : trimesh.scene.lighting.Light
      Light object to be converted to GL
    transform : (4, 4) float
      Transformation matrix of light
    lightN : int
      Result of gl.GL_LIGHT0, gl.GL_LIGHT1, etc

    Returns
    --------------
    multiarg : [tuple]
      List of args to pass to gl.glLightFv eg:
      [gl.glLightfb(*a) for a in multiarg]
    """
    ...
