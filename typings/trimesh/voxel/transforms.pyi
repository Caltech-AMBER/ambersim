"""
This type stub file was generated by pyright.
"""

from typing import Optional

from .. import caching

class Transform:
    """
    Class for caching metadata associated with 4x4 transformations.

    The transformation matrix is used to define relevant properties
    for the voxels, including pitch and origin.
    """

    def __init__(self, matrix, datastore: Optional[caching.DataStore] = ...) -> None:
        """
        Initialize with a transform.

        Parameters
        -----------
        matrix : (4, 4) float
          Homogeneous transformation matrix
        datastore
          If passed store the actual values in a reference to
          another datastore.
        """
        ...
    def __hash__(self) -> int:
        """
        Get the hash of the current transformation matrix.

        Returns
        ------------
        hash : str
          Hash of transformation matrix
        """
        ...
    @property
    def translation(self):
        """
        Get the translation component of the matrix

        Returns
        ------------
        translation : (3,) float
          Cartesian translation
        """
        ...
    @property
    def matrix(self):
        """
        Get the homogeneous transformation matrix.

        Returns
        -------------
        matrix : (4, 4) float
          Transformation matrix
        """
        ...
    @matrix.setter
    def matrix(self, values):  # -> None:
        """
        Set the homogeneous transformation matrix.

        Parameters
        -------------
        matrix : (4, 4) float
          Transformation matrix
        """
        ...
    @caching.cache_decorator
    def scale(self):  # -> NDArray[Unknown]:
        """
        Get the scale factor of the current transformation.

        Returns
        -------------
        scale : (3,) float
          Scale factor from the matrix
        """
        ...
    @caching.cache_decorator
    def pitch(self):  # -> Any:
        ...
    @caching.cache_decorator
    def unit_volume(self):  # -> Any:
        """Volume of a transformed unit cube."""
        ...
    def apply_transform(self, matrix):  # -> Self@Transform:
        """Mutate the transform in-place and return self."""
        ...
    def apply_translation(self, translation):  # -> Self@Transform:
        """Mutate the transform in-place and return self."""
        ...
    def apply_scale(self, scale):  # -> Self@Transform:
        """Mutate the transform in-place and return self."""
        ...
    def transform_points(self, points):  # -> ndarray[Any, dtype[float64]] | Any:
        """
        Apply the transformation to points (not in-place).

        Parameters
        ----------
        points: (n, 3) float
          Points in cartesian space

        Returns
        ----------
        transformed : (n, 3) float
          Points transformed by matrix
        """
        ...
    def inverse_transform_points(self, points):  # -> ndarray[Any, dtype[float64]] | Any:
        """Apply the inverse transformation to points (not in-place)."""
        ...
    @caching.cache_decorator
    def inverse_matrix(self): ...
    def copy(self):  # -> Transform:
        ...
    @caching.cache_decorator
    def is_identity(self):  # -> bool:
        """
        Flags this transformation being sufficiently close to eye(4).
        """
        ...
