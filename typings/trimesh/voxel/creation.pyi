"""
This type stub file was generated by pyright.
"""

from ..constants import log_time

@log_time
def voxelize_subdivide(mesh, pitch, max_iter=..., edge_factor=...):  # -> VoxelGrid:
    """
    Voxelize a surface by subdividing a mesh until every edge is
    shorter than: (pitch / edge_factor)

    Parameters
    -----------
    mesh : trimesh.Trimesh
      Source mesh
    pitch : float
      Side length of a single voxel cube
    max_iter : int
      Cap maximum subdivisions or None for no limit.
    edge_factor : float
      Proportion of pitch maximum edge length.

    Returns
    -----------
    VoxelGrid instance representing the voxelized mesh.
    """
    ...

def local_voxelize(mesh, point, pitch, radius, fill=..., **kwargs):  # -> VoxelGrid | None:
    """
    Voxelize a mesh in the region of a cube around a point. When fill=True,
    uses proximity.contains to fill the resulting voxels so may be meaningless
    for non-watertight meshes. Useful to reduce memory cost for small values of
    pitch as opposed to global voxelization.

    Parameters
    -----------
    mesh : trimesh.Trimesh
      Source geometry
    point : (3, ) float
      Point in space to voxelize around
    pitch :  float
      Side length of a single voxel cube
    radius : int
      Number of voxel cubes to return in each direction.
    kwargs : parameters to pass to voxelize_subdivide

    Returns
    -----------
    voxels : VoxelGrid instance with resolution (m, m, m) where m=2*radius+1
        or None if the volume is empty
    """
    ...

@log_time
def voxelize_ray(mesh, pitch, per_cell=...):  # -> VoxelGrid:
    """
    Voxelize a mesh using ray queries.

    Parameters
    -------------
    mesh     : Trimesh object
                 Mesh to be voxelized
    pitch    : float
                 Length of voxel cube
    per_cell : (2,) int
                 How many ray queries to make per cell

    Returns
    -------------
    VoxelGrid instance representing the voxelized mesh.
    """
    ...

@log_time
def voxelize_binvox(mesh, pitch=..., dimension=..., bounds=..., **binvoxer_kwargs):  # -> VoxelGrid:
    """
    Voxelize via binvox tool.

    Parameters
    --------------
    mesh : trimesh.Trimesh
      Mesh to voxelize
    pitch : float
      Side length of each voxel. Ignored if dimension is provided
    dimension: int
      Number of voxels along each dimension. If not provided, this is
        calculated based on pitch and bounds/mesh extents
    bounds: (2, 3) float
      min/max values of the returned `VoxelGrid` in each instance. Uses
      `mesh.bounds` if not provided.
    **binvoxer_kwargs:
      Passed to `trimesh.exchange.binvox.Binvoxer`.
      Should not contain `bounding_box` if bounds is not None.

    Returns
    --------------
    `VoxelGrid` instance

    Raises
    --------------
    `ValueError` if `bounds is not None and 'bounding_box' in binvoxer_kwargs`.
    """
    ...

voxelizers = ...

def voxelize(mesh, pitch, method=..., **kwargs):
    """
    Voxelize the given mesh using the specified implementation.

    See `voxelizers` for available implementations or to add your own, e.g. via
    `voxelizers['custom_key'] = custom_fn`.

    `custom_fn` should have signature `(mesh, pitch, **kwargs) -> VoxelGrid`
    and should not modify encoding.

    Parameters
    --------------
    mesh: Trimesh object (left unchanged).
    pitch: float, side length of each voxel.
    method: implementation method. Must be in `fillers`.
    **kwargs: additional kwargs passed to the specified implementation.

    Returns
    --------------
    A VoxelGrid instance.
    """
    ...
