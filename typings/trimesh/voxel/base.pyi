"""
This type stub file was generated by pyright.
"""

from .. import caching
from ..parent import Geometry

"""
voxel.py
-----------

Convert meshes to a simple voxel data structure and back again.
"""

class VoxelGrid(Geometry):
    """
    Store 3D voxels.
    """

    def __init__(self, encoding, transform=..., metadata=...) -> None: ...
    def __hash__(self) -> int:
        """
        Get the hash of the current transformation matrix.

        Returns
        ------------
        hash : str
          Hash of transformation matrix
        """
        ...
    @property
    def encoding(self):
        """
        `Encoding` object providing the occupancy grid.

        See `trimesh.voxel.encoding` for implementations.
        """
        ...
    @encoding.setter
    def encoding(self, encoding):  # -> None:
        ...
    @property
    def transform(self):
        """4x4 homogeneous transformation matrix."""
        ...
    @transform.setter
    def transform(self, matrix):  # -> None:
        """4x4 homogeneous transformation matrix."""
        ...
    @property
    def translation(self):
        """Location of voxel at [0, 0, 0]."""
        ...
    @property
    def scale(self):  # -> Any:
        """
        3-element float representing per-axis scale.

        Raises a `RuntimeError` if `self.transform` has rotation or
        shear components.
        """
        ...
    @property
    def pitch(self):  # -> Any:
        """
        Uniform scaling factor representing the side length of
        each voxel.

        Returns
        -----------
        pitch : float
          Pitch of the voxels.

        Raises
        ------------
        `RuntimeError`
          If `self.transformation` has rotation or shear
          components of has non-uniform scaling.
        """
        ...
    @property
    def element_volume(self):  # -> Any:
        ...
    def apply_transform(self, matrix):  # -> Self@VoxelGrid:
        ...
    def strip(self):  # -> Self@VoxelGrid:
        """
        Mutate self by stripping leading/trailing planes of zeros.

        Returns
        --------
        self after mutation occurs in-place
        """
        ...
    @caching.cache_decorator
    def bounds(self):  # -> NDArray[Any]:
        ...
    @caching.cache_decorator
    def extents(self):  # -> Any:
        ...
    @caching.cache_decorator
    def is_empty(self): ...
    @property
    def shape(self):
        """3-tuple of ints denoting shape of occupancy grid."""
        ...
    @caching.cache_decorator
    def filled_count(self):
        """int, number of occupied voxels in the grid."""
        ...
    def is_filled(self, point):  # -> Any:
        """
        Query points to see if the voxel cells they lie in are
        filled or not.

        Parameters
        ----------
        point : (n, 3) float
          Points in space

        Returns
        ---------
        is_filled : (n,) bool
          Is cell occupied or not for each point
        """
        ...
    def fill(self, method=..., **kwargs):  # -> Self@VoxelGrid:
        """
        Mutates self by filling in the encoding according
        to `morphology.fill`.

        Parameters
        ----------
        method : hashable
          Implementation key, one of
          `trimesh.voxel.morphology.fill.fillers` keys
        **kwargs : dict
          Additional kwargs passed through to
          the keyed implementation.

        Returns
        ----------
        self : VoxelGrid
          After replacing encoding with a filled version.
        """
        ...
    def hollow(self):  # -> Self@VoxelGrid:
        """
        Mutates self by removing internal voxels
        leaving only surface elements.

        Surviving elements are those in encoding that are
        adjacent to an empty voxel where adjacency is
        controlled by `structure`.

        Returns
        ----------
        self : VoxelGrid
          After replacing encoding with a surface version.
        """
        ...
    @caching.cache_decorator
    def marching_cubes(self):  # -> Trimesh:
        """
        A marching cubes Trimesh representation of the voxels.

        No effort was made to clean or smooth the result in any way;
        it is merely the result of applying the scikit-image
        measure.marching_cubes function to self.encoding.dense.

        Returns
        ---------
        meshed : trimesh.Trimesh
          Representing the current voxel
          object as returned by marching cubes algorithm.
        """
        ...
    @property
    def matrix(self):
        """
        Return a DENSE matrix of the current voxel encoding.

        Returns
        -------------
        dense : (a, b, c) bool
          Numpy array of dense matrix
          Shortcut to voxel.encoding.dense
        """
        ...
    @caching.cache_decorator
    def volume(self):  # -> Any:
        """
        What is the volume of the filled cells in the current
        voxel object.

        Returns
        ---------
        volume : float
          Volume of filled cells.
        """
        ...
    @caching.cache_decorator
    def points(self):  # -> ndarray[Any, dtype[float64]] | Any:
        """
        The center of each filled cell as a list of points.

        Returns
        ----------
        points : (self.filled, 3) float
          Points in space.
        """
        ...
    @property
    def sparse_indices(self):
        """(n, 3) int array of sparse indices of occupied voxels."""
        ...
    def as_boxes(self, colors=..., **kwargs):  # -> Trimesh:
        """
        A rough Trimesh representation of the voxels with a box
        for each filled voxel.

        Parameters
        ----------
        colors : None, (3,) or (4,) float or uint8
          (X, Y, Z, 3) or (X, Y, Z, 4) float or uint8
          Where matrix.shape == (X, Y, Z)

        Returns
        ---------
        mesh : trimesh.Trimesh
          Mesh with one box per filled cell.
        """
        ...
    def points_to_indices(self, points):  # -> NDArray[Any]:
        """
        Convert points to indices in the matrix array.

        Parameters
        ----------
        points: (n, 3) float, point in space

        Returns
        ---------
        indices: (n, 3) int array of indices into self.encoding
        """
        ...
    def indices_to_points(self, indices):  # -> ndarray[Any, dtype[float64]] | Any:
        ...
    def show(self, *args, **kwargs):  # -> SceneViewer:
        """
        Convert the current set of voxels into a trimesh for visualization
        and show that via its built- in preview method.
        """
        ...
    def copy(self):  # -> VoxelGrid:
        ...
    def export(self, file_obj=..., file_type=..., **kwargs):
        """
        Export the current VoxelGrid.

        Parameters
        ------------
        file_obj : file-like or str
          File or file-name to export to.
        file_type : None or str
          Only 'binvox' currently supported.

        Returns
        ---------
        export : bytes
          Value of export.
        """
        ...
    def revoxelized(self, shape):  # -> VoxelGrid:
        """
        Create a new VoxelGrid without rotations, reflections
        or shearing.

        Parameters
        ----------
        shape : (3, int)
          The shape of the returned VoxelGrid.

        Returns
        ----------
        vox : VoxelGrid
          Of the given shape with possibly non-uniform
          scale and translation transformation matrix.
        """
        ...
    def __add__(self, other): ...
