"""
This type stub file was generated by pyright.
"""

"""Trackball class for 3D manipulation of viewpoints.
"""

class Trackball:
    """A trackball class for creating camera transforms from mouse movements."""

    STATE_ROTATE = ...
    STATE_PAN = ...
    STATE_ROLL = ...
    STATE_ZOOM = ...
    def __init__(self, pose, size, scale, target=...) -> None:
        """Initialize a trackball with an initial camera-to-world pose
        and the given parameters.

        Parameters
        ----------
        pose : [4,4]
            An initial camera-to-world pose for the trackball.

        size : (float, float)
            The width and height of the camera image in pixels.

        scale : float
            The diagonal of the scene's bounding box --
            used for ensuring translation motions are sufficiently
            fast for differently-sized scenes.

        target : (3,) float
            The center of the scene in world coordinates.
            The trackball will revolve around this point.
        """
        ...
    @property
    def pose(self):  # -> Unknown | Any | ndarray[Unknown, Unknown]:
        """autolab_core.RigidTransform : The current camera-to-world pose."""
        ...
    def set_state(self, state):  # -> None:
        """Set the state of the trackball in order to change the effect of
        dragging motions.

        Parameters
        ----------
        state : int
            One of Trackball.STATE_ROTATE, Trackball.STATE_PAN,
            Trackball.STATE_ROLL, and Trackball.STATE_ZOOM.
        """
        ...
    def resize(self, size):  # -> None:
        """Resize the window.

        Parameters
        ----------
        size : (float, float)
            The new width and height of the camera image in pixels.
        """
        ...
    def down(self, point):  # -> None:
        """Record an initial mouse press at a given point.

        Parameters
        ----------
        point : (2,) int
            The x and y pixel coordinates of the mouse press.
        """
        ...
    def drag(self, point):  # -> None:
        """Update the tracball during a drag.

        Parameters
        ----------
        point : (2,) int
            The current x and y pixel coordinates of the mouse during a drag.
            This will compute a movement for the trackball with the relative
            motion between this point and the one marked by down().
        """
        ...
    def scroll(self, clicks):  # -> None:
        """Zoom using a mouse scroll wheel motion.

        Parameters
        ----------
        clicks : int
            The number of clicks. Positive numbers indicate forward wheel
            movement.
        """
        ...
    def rotate(self, azimuth, axis=...):  # -> None:
        """Rotate the trackball about the "Up" axis by azimuth radians.

        Parameters
        ----------
        azimuth : float
            The number of radians to rotate.
        """
        ...
