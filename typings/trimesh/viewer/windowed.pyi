"""
This type stub file was generated by pyright.
"""

import pyglet

"""
windowed.py
---------------

Provides a pyglet- based windowed viewer to preview
Trimesh, Scene, PointCloud, and Path objects.

Works on all major platforms: Windows, Linux, and OSX.
"""
if int(pyglet.version.split(".")[0]) >= 2: ...
_SMOOTH_MAX_FACES = ...

class SceneViewer(pyglet.window.Window):
    def __init__(
        self,
        scene,
        smooth=...,
        flags=...,
        visible=...,
        resolution=...,
        start_loop=...,
        callback=...,
        callback_period=...,
        caption=...,
        fixed=...,
        offset_lines=...,
        line_settings=...,
        background=...,
        window_conf=...,
        profile=...,
        record=...,
        **kwargs,
    ) -> None:
        """
        Create a window that will display a trimesh.Scene object
        in an OpenGL context via pyglet.

        Parameters
        ---------------
        scene : trimesh.scene.Scene
          Scene with geometry and transforms
        smooth : bool
          If True try to smooth shade things
        flags : dict
          If passed apply keys to self.view:
          ['cull', 'wireframe', etc]
        visible : bool
          Display window or not
        resolution : (2,) int
          Initial resolution of window
        start_loop : bool
          Call pyglet.app.run() at the end of init
        callback : function
          A function which can be called periodically to
          update things in the scene
        callback_period : float
          How often to call the callback, in seconds
        fixed : None or iterable
          List of keys in scene.geometry to skip view
          transform on to keep fixed relative to camera
        offset_lines : bool
          If True, will offset lines slightly so if drawn
          coplanar with mesh geometry they will be visible
        background : None or (4,) uint8
          Color for background
        window_conf : None, or gl.Config
          Passed to window init
        profile : bool
          If set will run a `pyinstrument` profile for
          every call to `on_draw` and print the output.
        record : bool
          If True, will save a list of `png` bytes to
          a list located in `scene.metadata['recording']`
        kwargs : dict
          Additional arguments to pass, including
          'background' for to set background color
        """
        ...
    def add_geometry(self, name, geometry, **kwargs):  # -> None:
        """
        Add a geometry to the viewer.

        Parameters
        --------------
        name : hashable
          Name that references geometry
        geometry : Trimesh, Path2D, Path3D, PointCloud
          Geometry to display in the viewer window
        kwargs **
          Passed to rendering.convert_to_vertexlist
        """
        ...
    def cleanup_geometries(self):  # -> None:
        """
        Remove any stored vertex lists that no longer
        exist in the scene.
        """
        ...
    def unhide_geometry(self, node):  # -> None:
        """
        If a node is hidden remove the flag and show the
        geometry on the next draw.

        Parameters
        -------------
        node : str
          Node to display
        """
        ...
    def hide_geometry(self, node):  # -> None:
        """
        Don't display the geometry contained at a node on
        the next draw.

        Parameters
        -------------
        node : str
          Node to not display
        """
        ...
    def reset_view(self, flags=...):  # -> None:
        """
        Set view to the default view.

        Parameters
        --------------
        flags : None or dict
          If any view key passed override the default
          e.g. {'cull': False}
        """
        ...
    def init_gl(self):  # -> None:
        """
        Perform the magic incantations to create an
        OpenGL scene using pyglet.
        """
        ...
    def toggle_culling(self):  # -> None:
        """
        Toggle back face culling.

        It is on by default but if you are dealing with
        non- watertight meshes you probably want to be able
        to see the back sides.
        """
        ...
    def toggle_wireframe(self):  # -> None:
        """
        Toggle wireframe mode

        Good for  looking inside meshes, off by default.
        """
        ...
    def toggle_fullscreen(self):  # -> None:
        """
        Toggle between fullscreen and windowed mode.
        """
        ...
    def toggle_axis(self):  # -> None:
        """
        Toggle a rendered XYZ/RGB axis marker:
        off, world frame, every frame
        """
        ...
    def toggle_grid(self):  # -> None:
        """
        Toggle a rendered grid.
        """
        ...
    def update_flags(self):  # -> None:
        """
        Check the view flags, and call required GL functions.
        """
        ...
    def on_resize(self, width, height):  # -> None:
        """
        Handle resized windows.
        """
        ...
    def on_mouse_press(self, x, y, buttons, modifiers):  # -> None:
        """
        Set the start point of the drag.
        """
        ...
    def on_mouse_drag(self, x, y, dx, dy, buttons, modifiers):  # -> None:
        """
        Pan or rotate the view.
        """
        ...
    def on_mouse_scroll(self, x, y, dx, dy):  # -> None:
        """
        Zoom the view.
        """
        ...
    def on_key_press(self, symbol, modifiers):  # -> None:
        """
        Call appropriate functions given key presses.
        """
        ...
    def on_draw(self):  # -> None:
        """
        Run the actual draw calls.
        """
        ...
    def flip(self):  # -> None:
        ...
    def save_image(self, file_obj):
        """
        Save the current color buffer to a file object
        in PNG format.

        Parameters
        -------------
        file_obj: file name, or file- like object
        """
        ...

def render_scene(scene, resolution=..., visible=..., **kwargs):  # -> bytes:
    """
    Render a preview of a scene to a PNG. Note that
    whether this works or not highly variable based on
    platform and graphics driver.

    Parameters
    ------------
    scene : trimesh.Scene
      Geometry to be rendered
    resolution : (2,) int or None
      Resolution in pixels or set from scene.camera
    visible : bool
      Show a window during rendering. Note that MANY
      platforms refuse to render with hidden windows
      and will likely return a blank image; this is a
      platform issue and cannot be fixed in Python.
    kwargs : **
      Passed to SceneViewer

    Returns
    ---------
    render : bytes
      Image in PNG format
    """
    ...
