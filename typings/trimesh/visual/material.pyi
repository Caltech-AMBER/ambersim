"""
This type stub file was generated by pyright.
"""

import abc

import numpy as np
from PIL import Image

from .. import util
from ..typed import NDArray, Optional

"""
material.py
-------------

Store visual materials as objects.
"""
_eps = ...

class Material(util.ABC):
    def __init__(self, *args, **kwargs) -> None: ...
    @abc.abstractmethod
    def __hash__(self) -> int: ...
    @abc.abstractproperty
    def main_color(self):  # -> None:
        """
        The "average" color of this material.

        Returns
        ---------
        color : (4,) uint8
          Average color of this material.
        """
        ...
    @property
    def name(self):  # -> Literal['material_0']:
        ...
    @name.setter
    def name(self, value):  # -> None:
        ...
    def copy(self):  # -> Self@Material:
        ...

class SimpleMaterial(Material):
    """
    Hold a single image texture.
    """

    def __init__(self, image=..., diffuse=..., ambient=..., specular=..., glossiness=..., **kwargs) -> None: ...
    def to_color(self, uv):  # -> None:
        ...
    def to_obj(self, name=...):  # -> tuple[dict[Unknown, Unknown], Unknown | Literal['material_0']]:
        """
        Convert the current material to an OBJ format
        material.

        Parameters
        -----------
        name : str or None
          Name to apply to the material

        Returns
        -----------
        tex_name : str
          Name of material
        mtl_name : str
          Name of mtl file in files
        files : dict
          Data as {file name : bytes}
        """
        ...
    def __hash__(self) -> int:
        """
        Provide a hash of the material so we can detect
        duplicates.

        Returns
        ------------
        hash : int
          Hash of image and parameters
        """
        ...
    @property
    def main_color(self):  # -> NDArray[uint8]:
        """
        Return the most prominent color.
        """
        ...
    @property
    def glossiness(self):  # -> float:
        ...
    @glossiness.setter
    def glossiness(self, value):  # -> None:
        ...
    def to_pbr(self):  # -> PBRMaterial:
        """
        Convert the current simple material to a
        PBR material.

        Returns
        ------------
        pbr : PBRMaterial
          Contains material information in PBR format.
        """
        ...

class MultiMaterial(Material):
    def __init__(self, materials=..., **kwargs) -> None:
        """
        Wrapper for a list of Materials.

        Parameters
        ----------
        materials : Optional[List[Material]]
            List of materials with which the container to be initialized.
        """
        ...
    def to_pbr(self):  # -> PBRMaterial:
        """
        TODO : IMPLEMENT
        """
        ...
    def __hash__(self) -> int:
        """
        Provide a hash of the multi material so we can detect
        duplicates.

        Returns
        ------------
        hash : int
          Xor hash of the contained materials.
        """
        ...
    def __iter__(self):  # -> Iterator[Unknown]:
        ...
    def __next__(self): ...
    def __len__(self):  # -> int:
        ...
    @property
    def main_color(self):  # -> None:
        """
        The "average" color of this material.

        Returns
        ---------
        color : (4,) uint8
          Average color of this material.
        """
        ...
    def add(self, material):  # -> None:
        """
        Adds new material to the container.

        Parameters
        ----------
        material : Material
            The material to be added.
        """
        ...
    def get(self, idx):
        """
        Get material by index.

        Parameters
        ----------
        idx : int
            Index of the material to be retrieved.

        Returns
        -------
            The material on the given index.
        """
        ...

class PBRMaterial(Material):
    """
    Create a material for physically based rendering as
    specified by GLTF 2.0:
    https://git.io/fhkPZ

    Parameters with `Texture` in them must be PIL.Image objects
    """

    def __init__(
        self,
        name=...,
        emissiveFactor=...,
        emissiveTexture=...,
        baseColorFactor=...,
        metallicFactor=...,
        roughnessFactor=...,
        normalTexture=...,
        occlusionTexture=...,
        baseColorTexture=...,
        metallicRoughnessTexture=...,
        doubleSided=...,
        alphaMode=...,
        alphaCutoff=...,
        **kwargs,
    ) -> None: ...
    @property
    def emissiveFactor(self):  # -> None:
        """
        The factors for the emissive color of the material.
        This value defines linear multipliers for the sampled
        texels of the emissive texture.

        Returns
        -----------
        emissiveFactor : (3,) float
           Ech element in the array MUST be greater than
           or equal to 0 and less than or equal to 1.
        """
        ...
    @emissiveFactor.setter
    def emissiveFactor(self, value):  # -> None:
        ...
    @property
    def alphaMode(self):  # -> None:
        """
        The material alpha rendering mode enumeration
        specifying the interpretation of the alpha value of
        the base color.

        Returns
        -----------
        alphaMode : str
          One of 'OPAQUE', 'MASK', 'BLEND'
        """
        ...
    @alphaMode.setter
    def alphaMode(self, value):  # -> None:
        ...
    @property
    def alphaCutoff(self):  # -> None:
        """
        Specifies the cutoff threshold when in MASK alpha mode.
        If the alpha value is greater than or equal to this value
        then it is rendered as fully opaque, otherwise, it is rendered
        as fully transparent. A value greater than 1.0 will render
        the entire material as fully transparent. This value MUST be
        ignored for other alpha modes. When alphaMode is not defined,
        this value MUST NOT be defined.

        Returns
        -----------
        alphaCutoff : float
          Value of cutoff.
        """
        ...
    @alphaCutoff.setter
    def alphaCutoff(self, value):  # -> None:
        ...
    @property
    def doubleSided(self):  # -> None:
        """
        Specifies whether the material is double sided.

        Returns
        -----------
        doubleSided : bool
          Specifies whether the material is double sided.
        """
        ...
    @doubleSided.setter
    def doubleSided(self, value):  # -> None:
        ...
    @property
    def metallicFactor(self):  # -> None:
        """
        The factor for the metalness of the material. This value
        defines a linear multiplier for the sampled metalness values
        of the metallic-roughness texture.


        Returns
        -----------
        metallicFactor : float
          How metally is the material
        """
        ...
    @metallicFactor.setter
    def metallicFactor(self, value):  # -> None:
        ...
    @property
    def roughnessFactor(self):  # -> None:
        """
        The factor for the roughness of the material. This value
        defines a linear multiplier for the sampled roughness values
        of the metallic-roughness texture.

        Returns
        -----------
        roughnessFactor : float
          Roughness of material.
        """
        ...
    @roughnessFactor.setter
    def roughnessFactor(self, value):  # -> None:
        ...
    @property
    def baseColorFactor(self):  # -> None:
        """
        The factors for the base color of the material. This
        value defines linear multipliers for the sampled texels
        of the base color texture.

        Returns
        ---------
        color : (4,) uint8
          RGBA color
        """
        ...
    @baseColorFactor.setter
    def baseColorFactor(self, value):  # -> None:
        ...
    @property
    def normalTexture(self):  # -> None:
        """
        The normal map texture.

        Returns
        ----------
        image : PIL.Image
          Normal texture.
        """
        ...
    @normalTexture.setter
    def normalTexture(self, value):  # -> None:
        ...
    @property
    def emissiveTexture(self):  # -> None:
        """
        The emissive texture.

        Returns
        ----------
        image : PIL.Image
          Emissive texture.
        """
        ...
    @emissiveTexture.setter
    def emissiveTexture(self, value):  # -> None:
        ...
    @property
    def occlusionTexture(self):  # -> None:
        """
        The occlusion texture.

        Returns
        ----------
        image : PIL.Image
          Occlusion texture.
        """
        ...
    @occlusionTexture.setter
    def occlusionTexture(self, value):  # -> None:
        ...
    @property
    def baseColorTexture(self):  # -> None:
        """
        The base color texture image.

        Returns
        ----------
        image : PIL.Image
          Color texture.
        """
        ...
    @baseColorTexture.setter
    def baseColorTexture(self, value):  # -> None:
        ...
    @property
    def metallicRoughnessTexture(self):  # -> None:
        """
        The metallic-roughness texture.

        Returns
        ----------
        image : PIL.Image
          Metallic-roughness texture.
        """
        ...
    @metallicRoughnessTexture.setter
    def metallicRoughnessTexture(self, value):  # -> None:
        ...
    @property
    def name(self):  # -> None:
        ...
    @name.setter
    def name(self, value):  # -> None:
        ...
    def copy(self):  # -> PBRMaterial:
        ...
    def to_color(self, uv):  # -> None:
        """
        Get the rough color at a list of specified UV
        coordinates.

        Parameters
        -------------
        uv : (n, 2) float
          UV coordinates on the material

        Returns
        -------------
        colors
        """
        ...
    def to_simple(self):  # -> SimpleMaterial:
        """
        Get a copy of the current PBR material as
        a simple material.

        Returns
        ------------
        simple : SimpleMaterial
          Contains material information in a simple manner
        """
        ...
    @property
    def main_color(self):  # -> NDArray[uint8]:
        ...
    def __hash__(self) -> int:
        """
        Provide a hash of the material so we can detect
        duplicate materials.

        Returns
        ------------
        hash : int
          Hash of image and parameters
        """
        ...

def empty_material(color: Optional[NDArray[np.uint8]] = ...) -> SimpleMaterial:
    """
    Return an empty material set to a single color

    Parameters
    -----------
    color : None or (3,) uint8
      RGB color

    Returns
    -------------
    material : SimpleMaterial
      Image is a a four pixel RGB
    """
    ...

def color_image(color: Optional[NDArray[np.uint8]] = ...) -> Image:
    """
    Generate an image with one color.

    Parameters
    ----------
    color
      Optional uint8 color

    Returns
    ----------
    image
      A (2, 2) RGBA image with the specified color.
    """
    ...

def pack(
    materials, uvs, deduplicate=..., padding: int = ..., max_tex_size_individual=..., max_tex_size_fused=...
):  # -> tuple[Unknown, NDArray[Unknown]] | tuple[PBRMaterial, NDArray[Unknown]] | tuple[SimpleMaterial, NDArray[Unknown]]:
    """
    Pack multiple materials with texture into a single material.

    UV coordinates outside of the 0.0-1.0 range will be coerced
    into this range using a "wrap" behavior (i.e. modulus).

    Alpha blending and backface culling settings are not supported!
    Returns a material with alpha values set, but alpha blending disabled.

    Parameters
    -----------
    materials : (n,) Material
      List of multiple materials
    uvs : (n, m, 2) float
      Original UV coordinates
    padding : int
      Number of pixels to pad each image with.
    max_tex_size_individual : int
      Maximum size of each individual texture.
    max_tex_size_fused : int | None
      Maximum size of the combined texture.
      Individual texture size will be reduced to fit.
      Set to None to allow infinite size.

    Returns
    ------------
    material : SimpleMaterial
      Combined material.
    uv : (p, 2) float
      Combined UV coordinates in the 0.0-1.0 range.
    """
    ...
