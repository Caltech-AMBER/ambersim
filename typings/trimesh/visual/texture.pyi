"""
This type stub file was generated by pyright.
"""

from .base import Visuals

class TextureVisuals(Visuals):
    def __init__(self, uv=..., material=..., image=..., face_materials=...) -> None:
        """
        Store a single material and per-vertex UV coordinates
        for a mesh.

        If passed UV coordinates and a single image it will
        create a SimpleMaterial for the image.

        Parameters
        --------------
        uv : (n, 2) float
          UV coordinates for the mesh
        material : Material
          Store images and properties
        image : PIL.Image
          Can be passed to automatically create material
        """
        ...
    @property
    def kind(self):  # -> Literal['texture']:
        """
        Return the type of visual data stored

        Returns
        ----------
        kind : str
          What type of visuals are defined
        """
        ...
    @property
    def defined(self):  # -> bool:
        """
        Check if any data is stored

        Returns
        ----------
        defined : bool
          Are UV coordinates and images set?
        """
        ...
    def __hash__(self) -> int:
        """
        Get a CRC of the stored data.

        Returns
        --------------
        crc : int
          Hash of items in self.vertex_attributes
        """
        ...
    @property
    def uv(self):  # -> None:
        """
        Get the stored UV coordinates.

        Returns
        ------------
        uv : (n, 2) float or None
          Pixel position per-vertex.
        """
        ...
    @uv.setter
    def uv(self, values):  # -> None:
        """
        Set the UV coordinates.

        Parameters
        --------------
        values : (n, 2) float or None
          Pixel locations on a texture per- vertex
        """
        ...
    def copy(self, uv=...):  # -> TextureVisuals:
        """
        Return a copy of the current TextureVisuals object.

        Returns
        ----------
        copied : TextureVisuals
          Contains the same information in a new object
        """
        ...
    def to_color(self):  # -> ColorVisuals:
        """
        Convert textured visuals to a ColorVisuals with vertex
        color calculated from texture.

        Returns
        -----------
        vis : trimesh.visuals.ColorVisuals
          Contains vertex color from texture
        """
        ...
    def face_subset(self, face_index):  # -> TextureVisuals:
        """
        Get a copy of
        """
        ...
    def update_vertices(self, mask):  # -> None:
        """
        Apply a mask to remove or duplicate vertex properties.

        Parameters
        ------------
        mask : (len(vertices),) bool or (n,) int
          Mask which can be used like: `vertex_attribute[mask]`
        """
        ...
    def update_faces(self, mask):  # -> None:
        """
        Apply a mask to remove or duplicate face properties,
        not applicable to texture visuals.
        """
        ...
    def concatenate(self, others):  # -> TextureVisuals | ColorVisuals:
        """
        Concatenate this TextureVisuals object with others
        and return the result without modifying this visual.

        Parameters
        -----------
        others : (n,) Visuals
          Other visual objects to concatenate

        Returns
        -----------
        concatenated : TextureVisuals
          Concatenated visual objects
        """
        ...

def unmerge_faces(faces, *args, **kwargs):  # -> list[Unknown] | list[ndarray[Any, dtype[int64]]]:
    """
    Textured meshes can come with faces referencing vertex
    indices (`v`) and an array the same shape which references
    vertex texture indices (`vt`) and sometimes even normal (`vn`).

    Vertex locations with different values of any of these can't
    be considered the "same" vertex, and for our simple data
    model we need to not combine these vertices.

    Parameters
    -------------
    faces : (n, d) int
      References vertex indices
    *args : (n, d) int
      Various references of corresponding values
      This is usually UV coordinates or normal indexes
    maintain_faces : bool
      Do not alter original faces and return no-op masks.

    Returns
    -------------
    new_faces : (m, d) int
      New faces for masked vertices
    mask_v : (p,) int
      A mask to apply to vertices
    mask_* : (p,) int
      A mask to apply to vt array to get matching UV coordinates
      Returns as many of these as args were passed
    """
    ...

def power_resize(image, resample=..., square=...):
    """
    Resize a PIL image so every dimension is a power of two.

    Parameters
    ------------
    image : PIL.Image
      Input image
    resample : int
      Passed to Image.resize
    square : bool
      If True, upsize to a square image

    Returns
    -------------
    resized : PIL.Image
      Input image resized
    """
    ...
