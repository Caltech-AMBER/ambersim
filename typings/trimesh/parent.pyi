"""
This type stub file was generated by pyright.
"""

import abc

from . import caching
from .util import ABC

"""
parent.py
-------------

The base class for Trimesh, PointCloud, and Scene objects
"""

class Geometry(ABC):
    """
    `Geometry` is the parent class for all geometry.

    By decorating a method with `abc.abstractmethod` it means
    the objects that inherit from `Geometry` MUST implement
    those methods.
    """

    @abc.abstractproperty
    def bounds(self):  # -> None:
        ...
    @abc.abstractproperty
    def extents(self):  # -> None:
        ...
    @abc.abstractmethod
    def apply_transform(self, matrix):  # -> None:
        ...
    @abc.abstractmethod
    def is_empty(self) -> bool: ...
    def __hash__(self) -> int:
        """
        Get a hash of the current geometry.

        Returns
        ---------
        hash : int
          Hash of current graph and geometry.
        """
        ...
    @abc.abstractmethod
    def copy(self):  # -> None:
        ...
    @abc.abstractmethod
    def show(self):  # -> None:
        ...
    @abc.abstractmethod
    def __add__(self, other):  # -> None:
        ...
    @abc.abstractmethod
    def export(self, file_obj, file_type=...):  # -> None:
        ...
    def __repr__(self):  # -> str:
        """
        Print quick summary of the current geometry without
        computing properties.

        Returns
        -----------
        repr : str
          Human readable quick look at the geometry.
        """
        ...
    def apply_translation(self, translation):  # -> None:
        """
        Translate the current mesh.

        Parameters
        ----------
        translation : (3,) float
          Translation in XYZ
        """
        ...
    def apply_scale(self, scaling):  # -> None:
        """
        Scale the mesh.

        Parameters
        ----------
        scaling : float or (3,) float
          Scale factor to apply to the mesh
        """
        ...
    def __radd__(self, other):  # -> Self@Geometry | None:
        """
        Concatenate the geometry allowing concatenation with
        built in `sum()` function:
          `sum(Iterable[trimesh.Trimesh])`

        Parameters
        ------------
        other : Geometry
          Geometry or 0

        Returns
        ----------
        concat : Geometry
          Geometry of combined result
        """
        ...

class Geometry3D(Geometry):
    """
    The `Geometry3D` object is the parent object of geometry objects
    which are three dimensional, including Trimesh, PointCloud,
    and Scene objects.
    """

    @caching.cache_decorator
    def bounding_box(self):  # -> Box:
        """
        An axis aligned bounding box for the current mesh.

        Returns
        ----------
        aabb : trimesh.primitives.Box
          Box object with transform and extents defined
          representing the axis aligned bounding box of the mesh
        """
        ...
    @caching.cache_decorator
    def bounding_box_oriented(self):  # -> Box:
        """
        An oriented bounding box for the current mesh.

        Returns
        ---------
        obb : trimesh.primitives.Box
          Box object with transform and extents defined
          representing the minimum volume oriented
          bounding box of the mesh
        """
        ...
    @caching.cache_decorator
    def bounding_sphere(self):  # -> Sphere:
        """
        A minimum volume bounding sphere for the current mesh.

        Note that the Sphere primitive returned has an unpadded
        exact `sphere_radius` so while the distance of every vertex
        of the current mesh from sphere_center will be less than
        sphere_radius, the faceted sphere primitive may not
        contain every vertex.

        Returns
        --------
        minball : trimesh.primitives.Sphere
          Sphere primitive containing current mesh
        """
        ...
    @caching.cache_decorator
    def bounding_cylinder(self):  # -> Cylinder:
        """
        A minimum volume bounding cylinder for the current mesh.

        Returns
        --------
        mincyl : trimesh.primitives.Cylinder
          Cylinder primitive containing current mesh
        """
        ...
    @caching.cache_decorator
    def bounding_primitive(self):  # -> Any:
        """
        The minimum volume primitive (box, sphere, or cylinder) that
        bounds the mesh.

        Returns
        ---------
        bounding_primitive : object
          Smallest primitive which bounds the mesh:
          trimesh.primitives.Sphere
          trimesh.primitives.Box
          trimesh.primitives.Cylinder
        """
        ...
    def apply_obb(self, **kwargs):
        """
        Apply the oriented bounding box transform to the current mesh.

        This will result in a mesh with an AABB centered at the
        origin and the same dimensions as the OBB.

        Parameters
        ------------
        kwargs
          Passed through to `bounds.oriented_bounds`

        Returns
        ----------
        matrix : (4, 4) float
          Transformation matrix that was applied
          to mesh to move it into OBB frame
        """
        ...
